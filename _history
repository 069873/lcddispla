{"entries":[{"timestamp":1739883395149,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":234,"start2":234,"length1":32,"length2":31}]}]},{"timestamp":1739883399205,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[1,"\nconst enum LCDWidgetCategoryOne {\n    //% block=\"Slider(01)\"\n    Slider = 1,\n    //% block=\"Bar(02)\"\n    Bar = 2,\n    //% block=\"Compass(03)\"\n    Compass = 3,\n    //% block=\"Gauge(04)\"\n    Gauge = 4,\n    //% block=\"LineMeter(05)\"\n    LineMeter = 5,\n}\n\nconst enum LCDWidgetCategoryTwo {\n    //% block=\"Slider(01)\"\n    Slider = 1,\n    //% block=\"Bar(02)\"\n    Bar = 2,\n    //% block=\"Compass(03)\"\n    Compass = 3,\n    //% block=\"Gauge(04)\"\n    Gauge = 4,\n    //% block=\"LineMeter(05)\"\n    LineMeter = 5,\n    //% block=\"LineMeter(06)\"\n    Chart = 6,\n    //% block=\"Text(07)\"\n    Text = 7,\n    //% block=\"Line(08)\"\n    Line = 8,\n    //% block=\"Rectangle(09)\"\n    Rectangle = 9,\n    //% block=\"Circle(10)\"\n    Circle = 10,\n    //% block=\"Triangle(11)\"\n    Triangle = 11,\n    //% block=\"Icon(12)\"\n    Icon = 12,\n    //% block=\"Gif(13)\"\n    Gif = 13,\n}\n\n//% block=\"ColorScreen\"\n//% weight=100 color=#5b3fe8 icon=\"\\uf022\"\n//% groups=\"['Basics', 'Graph', \"Widget\"]\"\nnamespace lcdDisplay {\n\n    export enum FontSize {\n        //% block=\"Large\"\n        Large = 1,\n        //% block=\"Small\"\n        Small = 2,\n    }\n\n    export enum RectangleRound {\n        //% block=\"RC\"\n        IsRound = 1,\n        //% block=\"not RC\"\n        NoneRound = 2,\n    }\n\n    export enum ChartStyles {\n        //% block=\"LineChart\"\n        LineChart = 3,\n        //% block=\"BarChart\"\n        BarChart = 2,\n        //% block=\"ShadingLineChart\"\n        ShadingLineChart = 1,\n    }\n\n    export enum DrawType {\n        //% block=\"fill\"\n        Fill = 1,\n        //% block=\"not fill\"\n        NotFill = 2,\n    }\n\n    export enum Protocol {\n        IIC = 1,\n        Serial = 2,\n    }\n\n\n    const IIC_MAX_TRANSFER_SIZE = 32;\n\n    // cmd len\n    const CMDLEN_OF_HEAD_LEN = 3;\n    const CMD_DELETE_OBJ_LEN = 0x06;\n    const CMD_SET_TOP_OBJ_LEN = 0x06;\n    const CMD_SET_COMPASS_VALUE_LEN = 0x07;\n    const CMD_SET_LEN = 0x07;\n    const CMD_SET_GAUGE_VALUE_LEN = 0x07;\n    const CMD_SET_LINE_METER_VALUE_LEN = 0x07;\n    const CMD_SET_BAR_VALUE_LEN = 0x07;\n    const CMD_SET_SLIDER_VALUE_LEN = 0x07;\n    const CMD_SET_ANGLE_OBJ_LEN = 0x08;\n    const CMD_DRAW_COMPASS_LEN = 0x0B;\n    const CMD_DRAW_CHART_LEN = 0x09;\n    const CMD_DRAW_SERIE_LEN = 0x09;\n    const CMD_OF_DRAW_ICON_INTERNAL_LEN = 0x0D;\n    const CMD_OF_DRAW_GIF_INTERNAL_LEN = 0x0D;\n    const CMD_OF_DRAW_BAR_LEN = 0x10;\n    const CMD_OF_DRAW_SLIDER_LEN = 0x10;\n    const CMD_DRAW_PIXEL_LEN = 0x11;\n    const CMD_DRAW_LINE_LEN = 0x11;\n    const CMD_OF_DRAW_CIRCLE_LEN = 0x13;\n    const CMD_OF_DRAW_GAUGE_LEN = 0x15;\n    const CMD_OF_DRAW_LINE_METER_LEN = 0x15;\n    const CMD_OF_DRAW_RECT_LEN = 0x16;\n    const CMD_OF_DRAW_TRIANGLE_LEN = 0x19;\n\n    // cmd\n    const CMD_SET_BACKGROUND_COLOR = 0x19;\n    const CMD_SET_BACKGROUND_IMG = 0x1A;\n    const CMD_OF_DRAW_PIXEL = 0x02;\n    const CMD_OF_DRAW_LINE = 0x03;\n    const CMD_OF_DRAW_RECT = 0x04;\n    const CMD_OF_DRAW_CIRCLE = 0x06;\n    const CMD_OF_DRAW_TRIANGLE = 0x07;\n    const CMD_OF_DRAW_ICON_INTERNAL = 0x08;\n    const CMD_OF_DRAW_ICON_EXTERNAL = 0x09;\n    const CMD_OF_DRAW_BAR = 0x0A;\n    const CMD_OF_DRAW_BAR_VALUE = 0x0B;\n    const CMD_OF_DRAW_SLIDER = 0x0C;\n    const CMD_OF_DRAW_SLIDER_VALUE = 0x0D;\n    const CMD_OF_DRAW_LINE_METER = 0x10;\n    const CMD_OF_DRAW_LINE_METER_VALUE = 0x11;\n    const CMD_OF_DRAW_COMPASS = 0x0E;\n    const CMD_OF_DRAW_COMPASS_VALUE = 0x0F;\n    const CMD_OF_DRAW_GAUGE = 0x12;\n    const CMD_OF_DRAW_GAUGE_VALUE = 0x13;\n    const CMD_OF_DRAW_LINE_CHART = 0x14;\n    const CMD_OF_DRAW_LINE_CHART_TEXT = 0x15;\n    const CMD_OF_DRAW_SERIE = 0x16;\n    const CMD_OF_DRAW_SERIE_DATA = 0x17;\n    const CMD_OF_DRAW_TEXT = 0x18;\n    const CMD_DELETE_OBJ = 0x1B;\n    const CMD_SET_TOP_OBJ = 0x1C;\n    const CMD_SET_ANGLE_OBJ = 0x1E;\n    const CMD_OF_DRAW_GIF_INTERNAL = 0x1F;\n    const CMD_OF_DRAW_GIF_EXTERNAL = 0x20;\n\n    const CMD_HEADER_HIGH = 0x55;\n    const CMD_HEADER_LOW = 0xaa;\n\n    let address = 0x2c;\n    class GenericNode {\n        id: number\n        next: GenericNode\n        constructor(id: number) {\n            this.id = id;\n            this.next = null;\n        }\n    }\n\n    class LinkedList {\n        head: GenericNode\n        size: number\n        id: number\n        constructor() {\n            this.head = null;\n            this.size = 0;\n            this.id = 1;\n        }\n\n        // adds a node to the end of the linked list\n        append() {\n            const newNode = new GenericNode(this.id);\n            if (this.head == null) {\n                this.head = newNode;\n            } else {\n                let current = this.head;\n                while (current.next != null) {\n                    current = current.next;\n                }\n                current.next = newNode;\n            }\n            this.size++;\n            this.id++;\n        }\n        // insert a node at a specific location\n        insert(index: number, id: number): boolean {\n            if (index < 0 || index > this.size) {\n                return false;\n            }\n            const newNode = new GenericNode(id);\n            if (index == 0) {\n                newNode.next = this.head;\n                this.head = newNode;\n            } else {\n                let current = this.head;\n                let previous = null;\n                let i = 0;\n                while (i < index) {\n                    previous = current;\n                    current = current.next;\n                    i++;\n                }\n                newNode.next = current;\n                previous.next = newNode;\n            }\n            this.size++;\n            return true;\n        }\n        // removes a node at a specific location\n        removeAt(index: number): boolean {\n            if (index < 0 || index >= this.size || this.head == null) {\n                return false;\n            }\n            let current = this.head;\n            if (index == 0) {\n                this.head = current.next;\n            } else {\n                let previous = null;\n                let i = 0;\n                while (i < index) {\n                    previous = current;\n                    current = current.next;\n                    i++;\n                }\n                previous.next = current.next;\n            }\n            this.size--;\n            return true;\n        }\n\n        // example Remove a node with a specific id\n        removeId(id: number): boolean {\n            if (this.head == null) {\n                return false;\n            }\n            let current = this.head;\n            if (current.id == id) {\n                this.head = current.next;\n            } else {\n                let previous = null;\n                while (current.id != id) {\n                    previous = current;\n                    current = current.next;\n                }\n                previous.next = current.next;\n            }\n            this.size--;\n            return true;\n        }\n    }\n\n    type GenericList = {\n        lineChartHead: LinkedList | null,\n        seriesHead: LinkedList | null,\n        compassHead: LinkedList | null,\n        textHead: LinkedList | null,\n        gaugeHead: LinkedList | null,\n        lineHead: LinkedList | null,\n        rectHead: LinkedList | null,\n        circleHead: LinkedList | null,\n        triangleHead: LinkedList | null,\n        lineMeterHead: LinkedList | null,\n        barHead: LinkedList | null,\n        sliderHead: LinkedList | null,\n        iconHead: LinkedList | null,\n        gifHead: LinkedList | null,\n    }\n\n    let list: GenericList = {\n        lineChartHead: null,\n        seriesHead: null,\n        compassHead: null,\n        textHead: null,\n        gaugeHead: null,\n        lineHead: null,\n        rectHead: null,\n        circleHead: null,\n        triangleHead: null,\n        lineMeterHead: null,\n        barHead: null,\n        sliderHead: null,\n        iconHead: null,\n        gifHead: null,\n    }\n    let protocol: Protocol = Protocol.IIC;\n    let chartID = 0;\n    let axisListX: string[] = [];\n    let axisListY: string[] = [];\n    let axisYData: number[] = [];\n    let seriesData: any = {};\n    let dataFactor = 1; // \"data coordinate conversion factors\n\n    /**\n     * ...\n     */\n\n    //% block=\"ColorScreen I2C initialization\"\n    //% weight=100\n    //% group=\"Basics\"\n    export function lcdInitIIC() {\n        creatList();\n        protocol = Protocol.IIC;\n        basic.pause(1000);\n        \n    }\n\n    /**\n     * ...\n     */\n\n    //% block=\"clear the screen\" \n    //% weight=95\n    //% group=\"Basics\"\n    export function lcdClearAll() {\n        cleanScreen();\n    }\n\n    /**\n     * ...\n     * @param color to color ,eg: 0xFF0000\n     */\n\n    //% block=\"set the background color %color\"\n    //% color.shadow=\"colorNumberPicker\" \n    //% weight=90\n    //% group=\"Basics\"\n    export function lcdSetBgcolor(color: number) {\n        setBackgroundColor(colorToCustom(color));\n    }\n\n    /**\n     * Convert red, green and blue channels into a RGB color\n     * @param red to red ,eg: 255\n     * @param green to green ,eg: 255\n     * @param blue to blue ,eg: 255\n     */\n\n    //% block=\"red %red green %green blue %blue\"\n    //% red.min=0 red.max=255 red.defl=255\n    //% green.min=0 green.max=255 green.defl=255\n    //% blue.min=0 blue.max=255 blue.defl=255\n    //% weight=85\n    //% group=\"Basics\"\n    export function lcdGetRgbColor(red: number, green: number, blue: number): number {\n        return (red << 16) + (green << 8) + (blue);\n    }\n\n    /**\n     * ...\n     * @param picture to picture ,eg: \"fruit.png\"\n     */\n\n    //% block=\"set the background picture %picture\"\n    //% weight=80\n    //% group=\"Basics\"\n    export function lcdSetBgIamge(picture: string) {\n        // setBackgroundImg(0, picture); // Internal storage of pictures\n        setBackgroundImg(1, picture); // Usb flash drive to store pictures\n    }\n\n    /**\n     * ...\n     * @param text to text ,eg: \"hello\"\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 120\n     * @param y to y ,eg: 120\n     * @param size to size ,eg: FontSize.Large\n     * @param color to color ,eg: 0xFF0000\n     */\n\n    //% block=\"display text %text number %num position x: %x y: %y size %size color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=120\n    //% y.min=0 y.max=240 y.defl=120\n    //% color.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=75\n    //% group=\"Basics\"\n    export function lcdDisplayText(text: string, num: number, x: number, y: number, size: FontSize, color: number) {\n        updateString(num, x, y, text, size, color);\n    }\n\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param time to time ,eg: \"12:40:30\"\n     * @param x to x ,eg: 120\n     * @param y to y ,eg: 120\n     * @param size to size ,eg: FontSize.Large\n     * @param color to color ,eg: 0xFF0000\n     */\n\n    //% block=\"display time number %num time %time position x: %x y: %y size %size color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=120\n    //% y.min=0 y.max=240 y.defl=120\n    //% color.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=70\n    //% group=\"Basics\"\n    //% deprecated=true\n    export function lcdDisplayTime(num: number, time: string, x: number, y: number, size: FontSize, color: number) {\n        updateString(num, x, y, time, size, color);\n    }\n\n    /**\n     * ...\n     * @param hour to hour ,eg: 12\n     * @param min to min ,eg: 40\n     * @param sec to sec ,eg: 30\n     */\n\n    //% block=\"hour %hour minutes %min second %sec \"\n    //% hour.min=0 hour.max=23 hour.defl=12\n    //% min.min=0 min.max=59 min.defl=40\n    //% sec.min=0 sec.max=59 sec.defl=30\n    //% inlineInputMode=inline\n    //% weight=68\n    //% group=\"Basics\"\n    export function lcdGetTime(hour: number, min: number, sec: number): string {\n        return `${hour < 10 ? \"0\" + hour : \"\" + hour}:${min < 10 ? \"0\" + min : \"\" + min}:${sec < 10 ? \"0\" + sec : \"\" + sec}`\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param name to name ,eg: \"/expression icon/happy.png\"\n     * @param x to x ,eg: 120\n     * @param y to y ,eg: 120\n     * @param size to size ,eg: FontSize.Large\n     */\n\n    //% block=\"display image number %num name %name position x: %x y: %y size %size\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=120\n    //% y.min=0 y.max=240 y.defl=120\n    //% size.min=0 size.max=512 size.defl=256\n    //% inlineInputMode=inline\n    //% weight=65\n    //% group=\"Basics\"\n    export function lcdDisplayIamge(num: number, name: string, x: number, y: number, size: number) {\n        updateIcon(num, x, y, name, size);\n    }\n\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param angle to angle ,eg: 180\n     */\n\n    //% block=\"rotate image number %num angle %angle\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% angle.min=0 angle.max=360 size.defl=180\n    //% weight=60\n    //% group=\"Basics\"\n    export function lcdRotateIamge(num: number, angle: number) {\n        setAngleIcon(num, angle * 10);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param name to name ,eg: \"Snowy.gif\"\n     * @param x to x ,eg: 120\n     * @param y to y ,eg: 120\n     * @param size to size ,eg: FontSize.Large\n     */\n\n    //% block=\"display gif number %num name %name position x: %x y: %y size %size\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=120\n    //% y.min=0 y.max=240 y.defl=120\n    //% size.min=0 size.max=512 size.defl=256\n    //% inlineInputMode=inline\n    //% weight=58\n    //% group=\"Basics\"\n    export function lcdDisplayGif(num: number, name: string, x: number, y: number, size: number) {\n        updateGif(num, x, y, name, size);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x1 to x1 ,eg: 40\n     * @param y1 to y1 ,eg: 120\n     * @param x2 to x2 ,eg: 300\n     * @param y2 to y2 ,eg: 120\n     * @param width to width ,eg: 20\n     * @param color to color ,eg: 0x007FFF\n     */\n\n    //% block=\"draw line number %num start x1: %x1 y1: %y1 end x2: %x2 y2: %y2 width %width color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x1.min=0 x1.max=320 x1.defl=40\n    //% y1.min=0 y1.max=240 y1.defl=120\n    //% x2.min=0 x2.max=320 x2.defl=300\n    //% y2.min=0 y2.max=240 y2.defl=120\n    //% color.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=55\n    //% group=\"Graph\"\n    //% advanced=true\n    export function lcdDrawLine(num: number, x1: number, y1: number, x2: number, y2: number, width: number, color: number) {\n        updateLine(num, x1, y1, x2, y2, width, color);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 0\n     * @param y to y ,eg: 0\n     * @param w to w ,eg: 300\n     * @param h to h ,eg: 200\n     * @param width to width ,eg: 5\n     * @param bocolor to bocolor ,eg: 0xFF0000\n     * @param fill to fill ,eg: DrawType.Fill\n     * @param fcolor to fcolor ,eg: 0xFFFFFF\n     * @param round to round ,eg: lcdDisplay.RectangleRound.NoneRound\n     */\n\n    //% block=\"draw rectangle number %num start x: %x y: %y width %w height %h line width %width Border color %bocolor %fill color %fcolor %round\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=0\n    //% y.min=0 y.max=240 y.defl=0\n    //% w.min=0 w.max=320 w.defl=300\n    //% h.min=0 h.max=240 h.defl=200\n    //% bocolor.shadow=\"colorNumberPicker\"\n    //% fcolor.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=50\n    //% group=\"Graph\"\n    //% advanced=true\n    export function lcdDrawRectangle(num: number, x: number, y: number, w: number, h: number, width: number, bocolor: number, fill: DrawType, fcolor: number, round: RectangleRound) {\n        updateRect(num, x, y, w, h, width, bocolor, fill === DrawType.Fill ? 1 : 0, fcolor, round === RectangleRound.IsRound ? 1 : 0);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 160\n     * @param y to y ,eg: 120\n     * @param r to r ,eg: 120\n     * @param width to width ,eg: 5\n     * @param bocolor to bocolor ,eg: 0xFF0000\n     * @param fill to fill ,eg: DrawType.Fill\n     * @param fcolor to fcolor ,eg: 0xFFFFFF\n     */\n\n    //% block=\"draw circle number %num center x: %x y: %y radius %r line width %width Border color %bocolor %fill color %fcolor\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=160\n    //% y.min=0 y.max=240 y.defl=120\n    //% r.min=0 r.max=120 r.defl=120\n    //% bocolor.shadow=\"colorNumberPicker\"\n    //% fcolor.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=45\n    //% group=\"Graph\"\n    //% advanced=true\n    export function lcdDrawCircle(num: number, x: number, y: number, r: number, width: number, bocolor: number, fill: DrawType, fcolor: number) {\n        updateCircle(num, x, y, r, width, bocolor, fill === DrawType.Fill ? 1 : 0, fcolor);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x1 to x1 ,eg: 160\n     * @param y1 to y1 ,eg: 0\n     * @param x2 to x2 ,eg: 0\n     * @param y2 to y2 ,eg: 240\n     * @param x3 to x3 ,eg: 320\n     * @param y3 to y3 ,eg: 240\n     * @param width to width ,eg: 5\n     * @param bocolor to bocolor ,eg: 0xFF0000\n     * @param fill to fill ,eg: DrawType.Fill\n     * @param fcolor to fcolor ,eg: 0xFFFFFF\n     */\n\n    //% block=\"draw triangle number %num x1: %x1 y1: %y1 x2: %x2 y2: %y2 x3: %x3 y3: %y3 line width %width Border color %bocolor %fill color %fcolor\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x1.min=0 x1.max=320 x1.defl=160\n    //% y1.min=0 y1.max=240 y1.defl=0\n    //% x2.min=0 x2.max=320 x2.defl=0\n    //% y2.min=0 y2.max=240 y2.defl=240\n    //% x3.min=0 x3.max=320 x3.defl=320\n    //% y3.min=0 y3.max=240 y3.defl=240\n    //% bocolor.shadow=\"colorNumberPicker\"\n    //% fcolor.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=40\n    //% group=\"Graph\"\n    //% advanced=true\n    export function lcdDrawTriangle(num: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, width: number, bocolor: number, fill: DrawType, fcolor: number) {\n        updateTriangle(num, x1, y1, x2, y2, x3, y3, width, bocolor, fill === DrawType.Fill ? 1 : 0, fcolor);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 80\n     * @param y to y ,eg: 120\n     * @param w to w ,eg: 200\n     * @param h to h ,eg: 20\n     * @param color to color ,eg: 0x007FFF\n     */\n\n    //% block=\"draw slider number %num position x: %x y: %y width %w height %h color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=80\n    //% y.min=0 y.max=240 y.defl=120\n    //% w.min=0 w.max=320 w.defl=200\n    //% h.min=0 h.max=240 h.defl=20\n    //% color.shadow=\"colorNumberPicker\"\n    //% expandableArgumentMode=\"toggle\"\n    //% inlineInputMode=inline\n    //% weight=35\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawSlider(num: number, x: number, y: number, w: number, h: number, color: number) {\n        updateSlider(num, x, y, w, h, color);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 80\n     * @param y to y ,eg: 120\n     * @param w to w ,eg: 200\n     * @param h to h ,eg: 20\n     * @param color to color ,eg: 0x007FFF\n     */\n\n    //% block=\"draw bar number %num position x: %x y: %y width %w height %h color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=80\n    //% y.min=0 y.max=240 y.defl=120\n    //% w.min=0 w.max=320 w.defl=200\n    //% h.min=0 h.max=240 h.defl=20\n    //% color.shadow=\"colorNumberPicker\"\n    //% expandableArgumentMode=\"toggle\"\n    //% inlineInputMode=inline\n    //% weight=30\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawBar(num: number, x: number, y: number, w: number, h: number, color: number) {\n        updateBar(num, x, y, w, h, color);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 50\n     * @param y to y ,eg: 0\n     * @param r to r ,eg: 240\n     */\n\n    //% block=\"draw compass number %num position x: %x y: %y radius %r\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=50\n    //% y.min=0 y.max=240 y.defl=0\n    //% r.min=0 r.max=320 r.defl=240\n    //% inlineInputMode=inline\n    //% weight=25\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawCompass(num: number, x: number, y: number, r: number) {\n        updateCompass(num, x, y, r);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 50\n     * @param y to y ,eg: 0\n     * @param r to r ,eg: 240\n     * @param start to start ,eg: 0\n     * @param end to end ,eg: 360\n     * @param color to color ,eg: 0x000000\n     * @param dcolor to dcolor ,eg: 0xFFFFFF\n     */\n\n    //% block=\"draw gauge number %num position x: %x y: %y radius %r start of scale %start End of scale %end Pointer color %color Dial color %dcolor\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=50\n    //% y.min=0 y.max=240 y.defl=0\n    //% r.min=0 r.max=320 r.defl=240\n    //% start.min=0 start.max=360 start.defl=0\n    //% end.min=0 end.max=360 end.defl=360\n    //% color.shadow=\"colorNumberPicker\"\n    //% dcolor.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=20\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawGauge(num: number, x: number, y: number, r: number, start: number, end: number, color: number, dcolor: number) {\n        updateGauge(num, x, y, r, start, end, color, dcolor);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 0\n     * @param y to y ,eg: 0\n     * @param r to r ,eg: 240\n     * @param start to start ,eg: 0\n     * @param end to end ,eg: 100\n     * @param color to color ,eg: 0x000000\n     * @param dcolor to dcolor ,eg: 0xFFFFFF\n     */\n\n    //% block=\"draw lineMeter number %num position x: %x y: %y radius %r start of scale %start End of scale %end Data color %color Dial color %dcolor\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=0\n    //% y.min=0 y.max=240 y.defl=0\n    //% r.min=0 r.max=320 r.defl=240\n    //% start.min=0 start.max=360 start.defl=0\n    //% end.min=0 end.max=360 end.defl=100\n    //% color.shadow=\"colorNumberPicker\"\n    //% dcolor.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=18\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawLineMeter(num: number, x: number, y: number, r: number, start: number, end: number, color: number, dcolor: number) {\n        updateLineMeter(num, x, y, r, start, end, color, dcolor);\n    }\n\n    /**\n     * ...\n     * @param type to type ,eg: LCDWidgetCategoryOne.Slider\n     * @param num to num ,eg: 1\n     * @param data to data ,eg: 80\n     */\n\n    //% block=\"set %type=LCDWidgetCategoryOne_conv widget number %num data %data\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% weight=17\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdSetWidgetData(type: number, num: number, data: number) {\n        switch (type) {\n            case LCDWidgetCategoryOne.Slider:\n                setSliderValue(num, data);\n                break;\n            case LCDWidgetCategoryOne.Bar:\n                setBarValue(num, data);\n                break;\n            case LCDWidgetCategoryOne.Compass:\n                setCompassScale(num, (data / 360) * 3600);\n                break;\n            case LCDWidgetCategoryOne.Gauge:\n                setGaugeValue(num, data);\n                break;\n            case LCDWidgetCategoryOne.LineMeter:\n                setMeterValue(num, data);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param xaxis to xaxis ,eg: \"Jan Feb Mar Apr May Jun\"\n     * @param yaxis to yaxis ,eg: \"100 80 60 40 20 0\"\n     * @param color to color ,eg: 0xFFFFFF\n     * @param styles to styles ,eg: ChartStyles.LineChart\n     */\n\n    //% block=\"draw chart number %num X-axis %xaxis Y-axis %yaxis background color %color styles %styles\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% color.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=16\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawChart(num: number, xaxis: string, yaxis: string, color: number, styles: ChartStyles) {\n        chartID = num;\n        axisListX = xaxis.split(\" \");\n        axisListY = yaxis.split(\" \");\n        axisListX.forEach((value, index) => { axisYData.push(0) });\n        dataFactor = Math.abs((parseInt(axisListY[0]) - parseInt(axisListY[axisListY.length-1])) / 100);\n        updateChart(chartID, color, styles);\n        basic.pause(100);\n        setChartAxisTexts(chartID, 0, axisListX);\n        basic.pause(100);\n        setChartAxisTexts(chartID, 1, axisListY);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param color to color ,eg: 0xFF0000\n     */\n\n    //% block=\"Set chart data number %num color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% color.shadow=\"colorNumberPicker\"\n    //% weight=14\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdAddChartData(num: number, color: number) {\n        seriesData[num] = axisYData;\n        updateChartSeries(chartID, num, color);\n        addChartSeriesData(chartID, num, seriesData[num], axisListY.length)\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param xaxis to xaxis ,eg: \"Jan\"\n     * @param data to data ,eg: 80\n     */\n\n    //% block=\"set chart data number %num X-axis %xaxis data %data\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% weight=12\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdSetChartData(num: number, xaxis: string, data: number) {\n        let index = axisListX.indexOf(xaxis);\n        if (index !== -1) {\n            updateChartPoint(chartID, num, index, Math.round(data / dataFactor));\n            // seriesData[num][index] = Math.round(data / 10);\n        }\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param color to color ,eg: 0x007FFF\n     * @param styles to styles ,eg: lcdDisplay.ChartStyles.BarChart\n     */\n\n    //% block=\"update chart number %num background color %color styles %styles\"\n    //% color.shadow=\"colorNumberPicker\"\n    //% weight=11\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdUpdateChart(num: number, color: number, styles: ChartStyles) {\n        updateChart(num, color, styles);\n    }\n\n    /**\n     * ...\n     * @param type to type ,eg: LCDWidgetCategoryTwo.Text\n     * @param num to num ,eg: 1\n     */\n\n    //% block=\"delete %type=LCDWidgetCategoryTwo_conv number %num\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% weight=8\n    //% group=\"Basics\"\n    export function lcdDeleteWidget(type: number, num: number) {\n        switch (type) {\n            case LCDWidgetCategoryTwo.Slider:\n                deleteSlider(num);\n                break;\n            case LCDWidgetCategoryTwo.Bar:\n                deleteBar(num);\n                break;\n            case LCDWidgetCategoryTwo.Compass:\n                deleteCompass(num);\n                break;\n            case LCDWidgetCategoryTwo.Gauge:\n                deleteGauge(num);\n                break;\n            case LCDWidgetCategoryTwo.LineMeter:\n                deleteLineMeter(num);\n                break;\n            case LCDWidgetCategoryTwo.Chart:\n                deleteChart(num);\n                break;\n            case LCDWidgetCategoryTwo.Text:\n                deleteString(num);\n                break;\n            case LCDWidgetCategoryTwo.Line:\n                deleteLine(num);\n                break;\n            case LCDWidgetCategoryTwo.Rectangle:\n                deleteRect(num);\n                break;\n            case LCDWidgetCategoryTwo.Circle:\n                deleteCircle(num);\n                break;\n            case LCDWidgetCategoryTwo.Triangle:\n                deleteTriangle(num);\n                break;\n            case LCDWidgetCategoryTwo.Icon:\n                deleteIcon(num);\n                break;\n            case LCDWidgetCategoryTwo.Gif:\n                deleteGif(num);\n            default:\n                break;\n        }\n    }\n\n    /**\n     * return the corresponding LCDWidgetCategoryOne number\n     */\n    //% blockId=\"LCDWidgetCategoryOne_conv\" block=\"%item\"\n    //% weight=2 blockHidden=true\n    export function getWidgetCategoryOne(item: LCDWidgetCategoryOne): number {\n        return item as number;\n    }\n\n    /**\n     * return the corresponding LCDWidgetCategoryTwo number\n     */\n    //% blockId=\"LCDWidgetCategoryTwo_conv\" block=\"%item\"\n    //% weight=1 blockHidden=true\n    export function getLCDWidgetCategoryTwo(item: LCDWidgetCategoryTwo): number {\n        return item as number;\n    }\n\n    function cleanScreen() {\n        let cmd = creatCommand(0x1D, 0x04);\n        writeCommand(cmd, 4);\n        basic.pause(1500);\n    }\n\n    function setBackgroundColor(color: number) {\n        let cmd = creatCommand(CMD_SET_BACKGROUND_COLOR, CMD_SET_LEN);\n        cmd = cmd.concat(data24Tobyte(color));\n        writeCommand(cmd, CMD_SET_LEN);\n        basic.pause(300);\n    }\n\n    function setBackgroundImg(location: number, str: string) {\n        let len = str.length;\n        let cmd = creatCommand(CMD_SET_BACKGROUND_IMG, len + 5);\n        cmd = cmd.concat([location]);\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 5);\n    }\n\n    function drawString(x: number, y: number, str: string, fontSize: number, color: number) {\n        let len = str.length > 242 ? 242 : str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_TEXT, len + 13);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_TEXT), fontSize]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 13);\n    }\n\n    function updateString(id: number, x: number, y: number, str: string, fontSize: number, color: number) {\n        let len = str.length > 242 ? 242 : str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_TEXT, len + 13);\n        cmd = cmd.concat([id, fontSize]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 13);\n    }\n\n    function deleteString(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_TEXT, id])\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.textHead, id);\n    }\n\n    function drawLcdTime(x: number, y: number, hour: number, min: number, sec: number, fontSize: number, color: number) {\n        drawString(x, y, `${hour < 10 ? \"0\" + hour : \"\" + hour}:${min < 10 ? \"0\" + min : \"\" + min}:${sec < 10 ? \"0\" + sec : \"\" + sec}`, fontSize, color);\n    }\n\n    function updateLcdTime(id: number, x: number, y: number, hour: number, min: number, sec: number, fontSize: number, color: number) {\n        updateString(id, x, y, `${hour < 10 ? \"0\" + hour : \"\" + hour}:${min < 10 ? \"0\" + min : \"\" + min}:${sec < 10 ? \"0\" + sec : \"\" + sec}`, fontSize, color);\n    }\n\n    function drawIcon(x: number, y: number, str: string, zoom: number) {\n        let len = str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_ICON_EXTERNAL, len + 11);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_ICON_INTERNAL)]).concat(data16Tobyte(zoom)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 11);\n    }\n\n    function setAngleIcon(id: number, angle: number) {\n        let cmd = creatCommand(CMD_SET_ANGLE_OBJ, CMD_SET_ANGLE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_ICON_INTERNAL, id]).concat(data16Tobyte(angle));\n        writeCommand(cmd, CMD_SET_ANGLE_OBJ_LEN);\n    }\n\n    function updateIcon(id: number, x: number, y: number, str: string, zoom: number) {\n        let len = str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_ICON_EXTERNAL, len + 11);\n        cmd = cmd.concat([id]).concat(data16Tobyte(zoom)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 11);\n    }\n\n    function deleteIcon(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_ICON_INTERNAL, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.iconHead, id);\n    }\n\n    function drawGif(x: number, y: number, str: string, zoom: number): number {\n        let len = str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_GIF_EXTERNAL, len + 11);\n        let id = getID(CMD_OF_DRAW_GIF_EXTERNAL);\n        cmd = cmd.concat([id]).concat(data16Tobyte(zoom)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 11);\n        return id;\n    }\n\n    function updateGif(id: number, x: number, y: number, str: string, zoom: number) {\n        let len = str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_GIF_EXTERNAL, len + 11);\n        cmd = cmd.concat([id]).concat(data16Tobyte(zoom)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 11);\n    }\n\n    function deleteGif(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_GIF_INTERNAL, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.gifHead, id);\n    }\n\n    function drawLine(x0: number, y0: number, x1: number, y1: number, width: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE, CMD_DRAW_LINE_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_LINE), width]).concat(data24Tobyte(color)).concat(data16Tobyte(x0)).concat(data16Tobyte(y0)).concat(data16Tobyte(x1)).concat(data16Tobyte(y1));\n        writeCommand(cmd, CMD_DRAW_LINE_LEN);\n    }\n\n    function updateLine(id: number, x0: number, y0: number, x1: number, y1: number, width: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE, CMD_DRAW_LINE_LEN);\n        cmd = cmd.concat([id, width]).concat(data24Tobyte(color)).concat(data16Tobyte(x0)).concat(data16Tobyte(y0)).concat(data16Tobyte(x1)).concat(data16Tobyte(y1));\n        writeCommand(cmd, CMD_DRAW_LINE_LEN);\n        basic.pause(10);\n    }\n\n    function deleteLine(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_LINE, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.lineHead, id);\n    }\n\n    function drawRect(x: number, y: number, w: number, h: number, bw: number, boColor: number, fill: number, fillColor: number, rounded: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_RECT, CMD_OF_DRAW_RECT_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_RECT), bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat([rounded]).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_RECT_LEN);\n    }\n\n    function updateRect(id: number, x: number, y: number, w: number, h: number, bw: number, boColor: number, fill: number, fillColor: number, rounded: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_RECT, CMD_OF_DRAW_RECT_LEN);\n        cmd = cmd.concat([id, bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat([rounded]).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_RECT_LEN);\n    }\n\n    function deleteRect(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_RECT, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.rectHead, id);\n    }\n\n    function drawCircle(x: number, y: number, r: number, bw: number, boColor: number, fill: number, fillColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_CIRCLE, CMD_OF_DRAW_CIRCLE_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_CIRCLE), bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat(data16Tobyte(r)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_CIRCLE_LEN);\n    }\n\n    function updateCircle(id: number, x: number, y: number, r: number, bw: number, boColor: number, fill: number, fillColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_CIRCLE, CMD_OF_DRAW_CIRCLE_LEN);\n        cmd = cmd.concat([id, bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat(data16Tobyte(r)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_CIRCLE_LEN);\n    }\n\n    function deleteCircle(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_CIRCLE, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.circleHead, id);\n    }\n\n    function drawTriangle(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, bw: number, boColor: number, fill: number, fillColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_TRIANGLE, CMD_OF_DRAW_TRIANGLE_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_TRIANGLE), bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat(data16Tobyte(x0)).concat(data16Tobyte(y0)).concat(data16Tobyte(x1)).concat(data16Tobyte(y1)).concat(data16Tobyte(x2)).concat(data16Tobyte(y2));\n        writeCommand(cmd, CMD_OF_DRAW_TRIANGLE_LEN);\n    }\n\n    function updateTriangle(id: number, x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, bw: number, boColor: number, fill: number, fillColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_TRIANGLE, CMD_OF_DRAW_TRIANGLE_LEN);\n        cmd = cmd.concat([id, bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat(data16Tobyte(x0)).concat(data16Tobyte(y0)).concat(data16Tobyte(x1)).concat(data16Tobyte(y1)).concat(data16Tobyte(x2)).concat(data16Tobyte(y2));\n        writeCommand(cmd, CMD_OF_DRAW_TRIANGLE_LEN);\n    }\n\n    function deleteTriangle(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_TRIANGLE, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.triangleHead, id);\n    }\n\n    function creatSlider(x: number, y: number, w: number, h: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_SLIDER, CMD_OF_DRAW_SLIDER_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_SLIDER)]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_SLIDER_LEN);\n    }\n\n    function updateSlider(id: number, x: number, y: number, w: number, h: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_SLIDER, CMD_OF_DRAW_SLIDER_LEN);\n        cmd = cmd.concat([id]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_SLIDER_LEN);\n    }\n\n    function setSliderValue(id: number, value: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_SLIDER_VALUE, CMD_SET_SLIDER_VALUE_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(value));\n        writeCommand(cmd, CMD_SET_SLIDER_VALUE_LEN);\n    }\n\n    function deleteSlider(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_SLIDER, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.sliderHead, id);\n    }\n\n    function creatBar(x: number, y: number, w: number, h: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_BAR, CMD_OF_DRAW_BAR_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_BAR)]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_BAR_LEN);\n    }\n\n    function updateBar(id: number, x: number, y: number, w: number, h: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_BAR, CMD_OF_DRAW_BAR_LEN);\n        cmd = cmd.concat([id]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_BAR_LEN);\n    }\n\n    function setBarValue(id: number, value: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_BAR_VALUE, CMD_SET_BAR_VALUE_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(value));\n        writeCommand(cmd, CMD_SET_BAR_VALUE_LEN);\n    }\n\n    function deleteBar(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_BAR, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.barHead, id);\n    }\n\n    function creatCompass(x: number, y: number, diameter: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_COMPASS, CMD_DRAW_COMPASS_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_COMPASS)]).concat(data16Tobyte(diameter)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_DRAW_COMPASS_LEN);\n    }\n\n    function updateCompass(id: number, x: number, y: number, diameter: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_COMPASS, CMD_DRAW_COMPASS_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(diameter)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_DRAW_COMPASS_LEN);\n    }\n\n    function setCompassScale(id: number, scale: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_COMPASS_VALUE, CMD_SET_COMPASS_VALUE_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(scale));\n        writeCommand(cmd, CMD_SET_COMPASS_VALUE_LEN);\n    }\n\n    function deleteCompass(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_COMPASS, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.compassHead, id);\n    }\n\n    function creatGauge(x: number, y: number, diameter: number, start: number, end: number, pointerColor: number, bgColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_GAUGE, CMD_OF_DRAW_GAUGE_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_GAUGE)]).concat(data16Tobyte(diameter)).concat(data16Tobyte(start)).concat(data16Tobyte(end)).concat(data24Tobyte(pointerColor)).concat(data24Tobyte(bgColor)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_GAUGE_LEN);\n    }\n\n    function updateGauge(id: number, x: number, y: number, diameter: number, start: number, end: number, pointerColor: number, bgColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_GAUGE, CMD_OF_DRAW_GAUGE_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(diameter)).concat(data16Tobyte(start)).concat(data16Tobyte(end)).concat(data24Tobyte(pointerColor)).concat(data24Tobyte(bgColor)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_GAUGE_LEN);\n    }\n\n    function setGaugeValue(id: number, value: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_GAUGE_VALUE, CMD_SET_GAUGE_VALUE_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(value));\n        writeCommand(cmd, CMD_SET_GAUGE_VALUE_LEN);\n    }\n\n    function deleteGauge(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_GAUGE, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.gaugeHead, id);\n    }\n\n    function creatLineMeter(x: number, y: number, size: number, start: number, end: number, pointerColor: number, bgColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_METER, CMD_OF_DRAW_LINE_METER_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_LINE_METER)]).concat(data16Tobyte(size)).concat(data16Tobyte(start)).concat(data16Tobyte(end)).concat(data24Tobyte(pointerColor)).concat(data24Tobyte(bgColor)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_LINE_METER_LEN);\n    }\n\n    function updateLineMeter(id: number, x: number, y: number, size: number, start: number, end: number, pointerColor: number, bgColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_METER, CMD_OF_DRAW_LINE_METER_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(size)).concat(data16Tobyte(start)).concat(data16Tobyte(end)).concat(data24Tobyte(pointerColor)).concat(data24Tobyte(bgColor)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_LINE_METER_LEN);\n    }\n\n    function setTopLineMeter(id: number) {\n        let cmd = creatCommand(CMD_SET_TOP_OBJ, CMD_SET_TOP_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_LINE_METER, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n    }\n\n    function deleteLineMeter(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_LINE_METER, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.lineMeterHead, id);\n    }\n\n    function creatChart(strX: string[], strY: string[], bgColor: number, type: number): number {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_CHART, CMD_DRAW_CHART_LEN);\n        let id = getID(CMD_OF_DRAW_LINE_CHART);\n        cmd = cmd.concat([id, type]).concat(data24Tobyte(bgColor));\n        writeCommand(cmd, CMD_DRAW_CHART_LEN);\n        basic.pause(100);\n        setChartAxisTexts(id, 0, strX);\n        basic.pause(100);\n        setChartAxisTexts(id, 1, strY);\n        return id;\n    }\n\n    function updateChart(id: number, bgColor: number, type: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_CHART, CMD_DRAW_CHART_LEN);\n        cmd = cmd.concat([id, type]).concat(data24Tobyte(bgColor));\n        writeCommand(cmd, CMD_DRAW_CHART_LEN);\n    }\n\n    function creatChartSeries(chartId: number, color: number): number {\n        let cmd = creatCommand(CMD_OF_DRAW_SERIE, CMD_DRAW_SERIE_LEN);\n        let serieId = getID(CMD_OF_DRAW_SERIE);\n        cmd = cmd.concat([serieId, chartId]).concat(data24Tobyte(color));\n        writeCommand(cmd, CMD_DRAW_SERIE_LEN);\n        return serieId;\n    }\n\n    function updateChartSeries(chartId: number, seriesId: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_SERIE, CMD_DRAW_SERIE_LEN);\n        cmd = cmd.concat([seriesId, chartId]).concat(data24Tobyte(color));\n        writeCommand(cmd, CMD_DRAW_SERIE_LEN);\n    }\n\n    function setChartAxisTexts(chartId: number, axis: number, text: string[]) {\n        let len = text.length - 1;\n        text.forEach((value, index) => { len = len + value.length });\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_CHART_TEXT, len + 6);\n        cmd = cmd.concat([chartId, axis]);\n        for (let i = 0; i < text.length; i++) {\n            text[i].split(\"\").forEach((value, index) => {\n                cmd.push(value.charCodeAt(0))\n            })\n            if (i != text.length - 1) {\n                cmd.push(0x0A); // \"\\n\"\n            }\n        }\n        writeCommand(cmd, len + 6);\n    }\n\n    function updateChartPoint(chartId: number, seriesId: number, pointNum: number, value: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_SERIE_DATA, 10);\n        cmd = cmd.concat([chartId, seriesId, 1, pointNum]).concat(data16Tobyte(value));\n        writeCommand(cmd, 10);\n    }\n\n    function addChartSeriesData(chartId: number, seriesId: number, point: number[], len: number): number {\n        let cmd = creatCommand(CMD_OF_DRAW_SERIE_DATA, len * 2 + 8);\n        cmd = cmd.concat([chartId, seriesId, 0, 0]);\n        point.forEach((value, index) => { cmd = cmd.concat(data16Tobyte(value)) });\n        writeCommand(cmd, len * 2 + 8);\n        return 1;\n    }\n\n    function setTopChart(id: number) {\n        let cmd = creatCommand(CMD_SET_TOP_OBJ, CMD_SET_TOP_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_LINE_CHART, id]);\n        writeCommand(cmd, CMD_SET_TOP_OBJ_LEN);\n    }\n\n    function deleteChart(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_LINE_CHART, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.lineChartHead, id);\n    }\n\n    function setMeterValue(lineMeterId: number, value: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_METER_VALUE, CMD_SET_LINE_METER_VALUE_LEN);\n        cmd = cmd.concat([lineMeterId]).concat(data16Tobyte(value));\n        writeCommand(cmd, CMD_SET_LINE_METER_VALUE_LEN);\n    }\n\n\n    /********************************************************************************************************************/\n    function creatList() {\n        list.lineChartHead = new LinkedList();\n        list.seriesHead = new LinkedList();\n        list.compassHead = new LinkedList();\n        list.textHead = new LinkedList();\n        list.gaugeHead = new LinkedList();\n        list.lineHead = new LinkedList();\n        list.rectHead = new LinkedList();\n        list.circleHead = new LinkedList();\n        list.triangleHead = new LinkedList();\n        list.lineMeterHead = new LinkedList();\n        list.barHead = new LinkedList();\n        list.sliderHead = new LinkedList();\n        list.iconHead = new LinkedList();\n        list.gifHead = new LinkedList();\n    }\n\n    function getID(type: number): number {\n        let id = 0;\n        switch (type) {\n            case CMD_OF_DRAW_LINE_CHART:\n                id = getNewID(list.lineChartHead);\n                break;\n            case CMD_OF_DRAW_SERIE:\n                id = getNewID(list.seriesHead);\n                break;\n            case CMD_OF_DRAW_COMPASS:\n                id = getNewID(list.compassHead);\n                break;\n            case CMD_OF_DRAW_TEXT:\n                id = getNewID(list.textHead);\n                break;\n            case CMD_OF_DRAW_GAUGE:\n                id = getNewID(list.gaugeHead);\n                break;\n            case CMD_OF_DRAW_LINE:\n                id = getNewID(list.lineHead);\n                break;\n            case CMD_OF_DRAW_RECT:\n                id = getNewID(list.rectHead);\n                break;\n            case CMD_OF_DRAW_TRIANGLE:\n                id = getNewID(list.triangleHead);\n                break;\n            case CMD_OF_DRAW_CIRCLE:\n                id = getNewID(list.circleHead);\n                break;\n            case CMD_OF_DRAW_LINE_METER:\n                id = getNewID(list.lineMeterHead);\n                break;\n            case CMD_OF_DRAW_BAR:\n                id = getNewID(list.barHead);\n                break;\n            case CMD_OF_DRAW_SLIDER:\n                id = getNewID(list.sliderHead);\n                break;\n            case CMD_OF_DRAW_ICON_INTERNAL:\n                id = getNewID(list.iconHead);\n                break;\n            case CMD_OF_DRAW_GIF_INTERNAL:\n                id = getNewID(list.gifHead);\n                break;\n            default:\n                break;\n        }\n        return id;\n    }\n\n    function getNewID(linkList: LinkedList): number {\n        linkList.append();\n        return linkList.head.id;\n    }\n\n    function deleteNodeByID(linkList: LinkedList, id: number) {\n        linkList.removeId(id);\n    }\n\n    function data16Tobyte(data: number): number[] {\n        return [(data >> 8) & 0xFF, data & 0xFF];\n    }\n\n    function data24Tobyte(data: number): number[] {\n        return [(data >> 16) & 0xFF, (data >> 8) & 0xFF, data & 0xFF];\n    }\n\n    function colorToCustom(color: number): number {\n        switch (color) {\n            case 0x999999:\n                return 0x696969;\n            case 0x7f00ff:\n                return 0x800080;\n            default:\n                return color;\n        }\n    }\n\n    function creatCommand(cmd: number, len: number): number[] {\n        return [CMD_HEADER_HIGH, CMD_HEADER_LOW, len - CMDLEN_OF_HEAD_LEN, cmd];\n    }\n\n    function writeCommand(data: number[], len: number) {\n        // serial.writeNumbers(data);\n        if (protocol == Protocol.IIC) {\n            let remain = len;\n            let i = 0;\n            while (remain > 0) {\n                let currentTransferSize = (remain > IIC_MAX_TRANSFER_SIZE) ? 32 : remain;\n                if (remain > IIC_MAX_TRANSFER_SIZE) {\n                    pins.i2cWriteBuffer(address, pins.createBufferFromArray(data.slice(i * IIC_MAX_TRANSFER_SIZE, i * IIC_MAX_TRANSFER_SIZE + currentTransferSize)), true);\n                } else {\n                    pins.i2cWriteBuffer(address, pins.createBufferFromArray(data.slice(i * IIC_MAX_TRANSFER_SIZE, i * IIC_MAX_TRANSFER_SIZE + currentTransferSize)), false);\n                }\n                remain = remain - currentTransferSize;\n                i = i + 1;\n            }\n        } else {\n\n        }\n    }\n\n    function readACK(length: number): Buffer {\n        if (protocol == Protocol.IIC) {\n            let remain = length;\n            let buf: Buffer = pins.createBuffer(0);\n            while (remain) {\n                let currentTransferSize = (remain > IIC_MAX_TRANSFER_SIZE) ? IIC_MAX_TRANSFER_SIZE : remain;\n                buf = buf.concat(pins.i2cReadBuffer(address, currentTransferSize));\n                remain = remain - currentTransferSize;\n            }\n            return buf;\n        } else {\n            let buf: Buffer = pins.createBuffer(0);\n            return buf;\n        }\n    }\n}"]],"start1":0,"start2":0,"length1":0,"length2":53880}]}]},{"timestamp":1739961544952,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[-1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n<block id=\"xRRgvHNlG#rZ^u`HECiY\" type=\"pxt-on-start\">\n</block>\n</xml>"]],"start1":0,"start2":0,"length1":112,"length2":0}]}]},{"timestamp":1739961549352,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n<block id=\"xRRgvHNlG#rZ^u`HECiY\" type=\"pxt-on-start\">\n</block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":70,"length2":98}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"\n"]],"start1":0,"start2":0,"length1":1,"length2":0}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,",\n        \"main.py\"\n    ],\n    \"testFiles\": [\n        \"test.ts\""],[0,"\n   "]],"start1":221,"start2":221,"length1":71,"length2":8},{"diffs":[[0,"\": \""],[-1,"py"],[1,"ts"],[0,"prj\""]],"start1":253,"start2":253,"length1":10,"length2":10}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.py","value":"\n"}]}],"snapshots":[{"timestamp":1739883395148,"editorVersion":"7.0.57","text":{"main.blocks":"","main.ts":"\nconst enum LCDWidgetCategoryOne {\n    //% block=\"Slider(01)\"\n    Slider = 1,\n    //% block=\"Bar(02)\"\n    Bar = 2,\n    //% block=\"Compass(03)\"\n    Compass = 3,\n    //% block=\"Gauge(04)\"\n    Gauge = 4,\n    //% block=\"LineMeter(05)\"\n    LineMeter = 5,\n}\n\nconst enum LCDWidgetCategoryTwo {\n    //% block=\"Slider(01)\"\n    Slider = 1,\n    //% block=\"Bar(02)\"\n    Bar = 2,\n    //% block=\"Compass(03)\"\n    Compass = 3,\n    //% block=\"Gauge(04)\"\n    Gauge = 4,\n    //% block=\"LineMeter(05)\"\n    LineMeter = 5,\n    //% block=\"LineMeter(06)\"\n    Chart = 6,\n    //% block=\"Text(07)\"\n    Text = 7,\n    //% block=\"Line(08)\"\n    Line = 8,\n    //% block=\"Rectangle(09)\"\n    Rectangle = 9,\n    //% block=\"Circle(10)\"\n    Circle = 10,\n    //% block=\"Triangle(11)\"\n    Triangle = 11,\n    //% block=\"Icon(12)\"\n    Icon = 12,\n    //% block=\"Gif(13)\"\n    Gif = 13,\n}\n\n//% block=\"ColorScreen\"\n//% weight=100 color=#5b3fe8 icon=\"\\uf022\"\n//% groups=\"['Basics', 'Graph', \"Widget\"]\"\nnamespace lcdDisplay {\n\n    export enum FontSize {\n        //% block=\"Large\"\n        Large = 1,\n        //% block=\"Small\"\n        Small = 2,\n    }\n\n    export enum RectangleRound {\n        //% block=\"RC\"\n        IsRound = 1,\n        //% block=\"not RC\"\n        NoneRound = 2,\n    }\n\n    export enum ChartStyles {\n        //% block=\"LineChart\"\n        LineChart = 3,\n        //% block=\"BarChart\"\n        BarChart = 2,\n        //% block=\"ShadingLineChart\"\n        ShadingLineChart = 1,\n    }\n\n    export enum DrawType {\n        //% block=\"fill\"\n        Fill = 1,\n        //% block=\"not fill\"\n        NotFill = 2,\n    }\n\n    export enum Protocol {\n        IIC = 1,\n        Serial = 2,\n    }\n\n\n    const IIC_MAX_TRANSFER_SIZE = 32;\n\n    // cmd len\n    const CMDLEN_OF_HEAD_LEN = 3;\n    const CMD_DELETE_OBJ_LEN = 0x06;\n    const CMD_SET_TOP_OBJ_LEN = 0x06;\n    const CMD_SET_COMPASS_VALUE_LEN = 0x07;\n    const CMD_SET_LEN = 0x07;\n    const CMD_SET_GAUGE_VALUE_LEN = 0x07;\n    const CMD_SET_LINE_METER_VALUE_LEN = 0x07;\n    const CMD_SET_BAR_VALUE_LEN = 0x07;\n    const CMD_SET_SLIDER_VALUE_LEN = 0x07;\n    const CMD_SET_ANGLE_OBJ_LEN = 0x08;\n    const CMD_DRAW_COMPASS_LEN = 0x0B;\n    const CMD_DRAW_CHART_LEN = 0x09;\n    const CMD_DRAW_SERIE_LEN = 0x09;\n    const CMD_OF_DRAW_ICON_INTERNAL_LEN = 0x0D;\n    const CMD_OF_DRAW_GIF_INTERNAL_LEN = 0x0D;\n    const CMD_OF_DRAW_BAR_LEN = 0x10;\n    const CMD_OF_DRAW_SLIDER_LEN = 0x10;\n    const CMD_DRAW_PIXEL_LEN = 0x11;\n    const CMD_DRAW_LINE_LEN = 0x11;\n    const CMD_OF_DRAW_CIRCLE_LEN = 0x13;\n    const CMD_OF_DRAW_GAUGE_LEN = 0x15;\n    const CMD_OF_DRAW_LINE_METER_LEN = 0x15;\n    const CMD_OF_DRAW_RECT_LEN = 0x16;\n    const CMD_OF_DRAW_TRIANGLE_LEN = 0x19;\n\n    // cmd\n    const CMD_SET_BACKGROUND_COLOR = 0x19;\n    const CMD_SET_BACKGROUND_IMG = 0x1A;\n    const CMD_OF_DRAW_PIXEL = 0x02;\n    const CMD_OF_DRAW_LINE = 0x03;\n    const CMD_OF_DRAW_RECT = 0x04;\n    const CMD_OF_DRAW_CIRCLE = 0x06;\n    const CMD_OF_DRAW_TRIANGLE = 0x07;\n    const CMD_OF_DRAW_ICON_INTERNAL = 0x08;\n    const CMD_OF_DRAW_ICON_EXTERNAL = 0x09;\n    const CMD_OF_DRAW_BAR = 0x0A;\n    const CMD_OF_DRAW_BAR_VALUE = 0x0B;\n    const CMD_OF_DRAW_SLIDER = 0x0C;\n    const CMD_OF_DRAW_SLIDER_VALUE = 0x0D;\n    const CMD_OF_DRAW_LINE_METER = 0x10;\n    const CMD_OF_DRAW_LINE_METER_VALUE = 0x11;\n    const CMD_OF_DRAW_COMPASS = 0x0E;\n    const CMD_OF_DRAW_COMPASS_VALUE = 0x0F;\n    const CMD_OF_DRAW_GAUGE = 0x12;\n    const CMD_OF_DRAW_GAUGE_VALUE = 0x13;\n    const CMD_OF_DRAW_LINE_CHART = 0x14;\n    const CMD_OF_DRAW_LINE_CHART_TEXT = 0x15;\n    const CMD_OF_DRAW_SERIE = 0x16;\n    const CMD_OF_DRAW_SERIE_DATA = 0x17;\n    const CMD_OF_DRAW_TEXT = 0x18;\n    const CMD_DELETE_OBJ = 0x1B;\n    const CMD_SET_TOP_OBJ = 0x1C;\n    const CMD_SET_ANGLE_OBJ = 0x1E;\n    const CMD_OF_DRAW_GIF_INTERNAL = 0x1F;\n    const CMD_OF_DRAW_GIF_EXTERNAL = 0x20;\n\n    const CMD_HEADER_HIGH = 0x55;\n    const CMD_HEADER_LOW = 0xaa;\n\n    let address = 0x2c;\n    class GenericNode {\n        id: number\n        next: GenericNode\n        constructor(id: number) {\n            this.id = id;\n            this.next = null;\n        }\n    }\n\n    class LinkedList {\n        head: GenericNode\n        size: number\n        id: number\n        constructor() {\n            this.head = null;\n            this.size = 0;\n            this.id = 1;\n        }\n\n        // adds a node to the end of the linked list\n        append() {\n            const newNode = new GenericNode(this.id);\n            if (this.head == null) {\n                this.head = newNode;\n            } else {\n                let current = this.head;\n                while (current.next != null) {\n                    current = current.next;\n                }\n                current.next = newNode;\n            }\n            this.size++;\n            this.id++;\n        }\n        // insert a node at a specific location\n        insert(index: number, id: number): boolean {\n            if (index < 0 || index > this.size) {\n                return false;\n            }\n            const newNode = new GenericNode(id);\n            if (index == 0) {\n                newNode.next = this.head;\n                this.head = newNode;\n            } else {\n                let current = this.head;\n                let previous = null;\n                let i = 0;\n                while (i < index) {\n                    previous = current;\n                    current = current.next;\n                    i++;\n                }\n                newNode.next = current;\n                previous.next = newNode;\n            }\n            this.size++;\n            return true;\n        }\n        // removes a node at a specific location\n        removeAt(index: number): boolean {\n            if (index < 0 || index >= this.size || this.head == null) {\n                return false;\n            }\n            let current = this.head;\n            if (index == 0) {\n                this.head = current.next;\n            } else {\n                let previous = null;\n                let i = 0;\n                while (i < index) {\n                    previous = current;\n                    current = current.next;\n                    i++;\n                }\n                previous.next = current.next;\n            }\n            this.size--;\n            return true;\n        }\n\n        // example Remove a node with a specific id\n        removeId(id: number): boolean {\n            if (this.head == null) {\n                return false;\n            }\n            let current = this.head;\n            if (current.id == id) {\n                this.head = current.next;\n            } else {\n                let previous = null;\n                while (current.id != id) {\n                    previous = current;\n                    current = current.next;\n                }\n                previous.next = current.next;\n            }\n            this.size--;\n            return true;\n        }\n    }\n\n    type GenericList = {\n        lineChartHead: LinkedList | null,\n        seriesHead: LinkedList | null,\n        compassHead: LinkedList | null,\n        textHead: LinkedList | null,\n        gaugeHead: LinkedList | null,\n        lineHead: LinkedList | null,\n        rectHead: LinkedList | null,\n        circleHead: LinkedList | null,\n        triangleHead: LinkedList | null,\n        lineMeterHead: LinkedList | null,\n        barHead: LinkedList | null,\n        sliderHead: LinkedList | null,\n        iconHead: LinkedList | null,\n        gifHead: LinkedList | null,\n    }\n\n    let list: GenericList = {\n        lineChartHead: null,\n        seriesHead: null,\n        compassHead: null,\n        textHead: null,\n        gaugeHead: null,\n        lineHead: null,\n        rectHead: null,\n        circleHead: null,\n        triangleHead: null,\n        lineMeterHead: null,\n        barHead: null,\n        sliderHead: null,\n        iconHead: null,\n        gifHead: null,\n    }\n    let protocol: Protocol = Protocol.IIC;\n    let chartID = 0;\n    let axisListX: string[] = [];\n    let axisListY: string[] = [];\n    let axisYData: number[] = [];\n    let seriesData: any = {};\n    let dataFactor = 1; // \"data coordinate conversion factors\n\n    /**\n     * ...\n     */\n\n    //% block=\"ColorScreen I2C initialization\"\n    //% weight=100\n    //% group=\"Basics\"\n    export function lcdInitIIC() {\n        creatList();\n        protocol = Protocol.IIC;\n        basic.pause(1000);\n        \n    }\n\n    /**\n     * ...\n     */\n\n    //% block=\"clear the screen\" \n    //% weight=95\n    //% group=\"Basics\"\n    export function lcdClearAll() {\n        cleanScreen();\n    }\n\n    /**\n     * ...\n     * @param color to color ,eg: 0xFF0000\n     */\n\n    //% block=\"set the background color %color\"\n    //% color.shadow=\"colorNumberPicker\" \n    //% weight=90\n    //% group=\"Basics\"\n    export function lcdSetBgcolor(color: number) {\n        setBackgroundColor(colorToCustom(color));\n    }\n\n    /**\n     * Convert red, green and blue channels into a RGB color\n     * @param red to red ,eg: 255\n     * @param green to green ,eg: 255\n     * @param blue to blue ,eg: 255\n     */\n\n    //% block=\"red %red green %green blue %blue\"\n    //% red.min=0 red.max=255 red.defl=255\n    //% green.min=0 green.max=255 green.defl=255\n    //% blue.min=0 blue.max=255 blue.defl=255\n    //% weight=85\n    //% group=\"Basics\"\n    export function lcdGetRgbColor(red: number, green: number, blue: number): number {\n        return (red << 16) + (green << 8) + (blue);\n    }\n\n    /**\n     * ...\n     * @param picture to picture ,eg: \"fruit.png\"\n     */\n\n    //% block=\"set the background picture %picture\"\n    //% weight=80\n    //% group=\"Basics\"\n    export function lcdSetBgIamge(picture: string) {\n        // setBackgroundImg(0, picture); // Internal storage of pictures\n        setBackgroundImg(1, picture); // Usb flash drive to store pictures\n    }\n\n    /**\n     * ...\n     * @param text to text ,eg: \"hello\"\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 120\n     * @param y to y ,eg: 120\n     * @param size to size ,eg: FontSize.Large\n     * @param color to color ,eg: 0xFF0000\n     */\n\n    //% block=\"display text %text number %num position x: %x y: %y size %size color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=120\n    //% y.min=0 y.max=240 y.defl=120\n    //% color.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=75\n    //% group=\"Basics\"\n    export function lcdDisplayText(text: string, num: number, x: number, y: number, size: FontSize, color: number) {\n        updateString(num, x, y, text, size, color);\n    }\n\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param time to time ,eg: \"12:40:30\"\n     * @param x to x ,eg: 120\n     * @param y to y ,eg: 120\n     * @param size to size ,eg: FontSize.Large\n     * @param color to color ,eg: 0xFF0000\n     */\n\n    //% block=\"display time number %num time %time position x: %x y: %y size %size color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=120\n    //% y.min=0 y.max=240 y.defl=120\n    //% color.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=70\n    //% group=\"Basics\"\n    //% deprecated=true\n    export function lcdDisplayTime(num: number, time: string, x: number, y: number, size: FontSize, color: number) {\n        updateString(num, x, y, time, size, color);\n    }\n\n    /**\n     * ...\n     * @param hour to hour ,eg: 12\n     * @param min to min ,eg: 40\n     * @param sec to sec ,eg: 30\n     */\n\n    //% block=\"hour %hour minutes %min second %sec \"\n    //% hour.min=0 hour.max=23 hour.defl=12\n    //% min.min=0 min.max=59 min.defl=40\n    //% sec.min=0 sec.max=59 sec.defl=30\n    //% inlineInputMode=inline\n    //% weight=68\n    //% group=\"Basics\"\n    export function lcdGetTime(hour: number, min: number, sec: number): string {\n        return `${hour < 10 ? \"0\" + hour : \"\" + hour}:${min < 10 ? \"0\" + min : \"\" + min}:${sec < 10 ? \"0\" + sec : \"\" + sec}`\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param name to name ,eg: \"/expression icon/happy.png\"\n     * @param x to x ,eg: 120\n     * @param y to y ,eg: 120\n     * @param size to size ,eg: FontSize.Large\n     */\n\n    //% block=\"display image number %num name %name position x: %x y: %y size %size\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=120\n    //% y.min=0 y.max=240 y.defl=120\n    //% size.min=0 size.max=512 size.defl=256\n    //% inlineInputMode=inline\n    //% weight=65\n    //% group=\"Basics\"\n    export function lcdDisplayIamge(num: number, name: string, x: number, y: number, size: number) {\n        updateIcon(num, x, y, name, size);\n    }\n\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param angle to angle ,eg: 180\n     */\n\n    //% block=\"rotate image number %num angle %angle\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% angle.min=0 angle.max=360 size.defl=180\n    //% weight=60\n    //% group=\"Basics\"\n    export function lcdRotateIamge(num: number, angle: number) {\n        setAngleIcon(num, angle * 10);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param name to name ,eg: \"Snowy.gif\"\n     * @param x to x ,eg: 120\n     * @param y to y ,eg: 120\n     * @param size to size ,eg: FontSize.Large\n     */\n\n    //% block=\"display gif number %num name %name position x: %x y: %y size %size\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=120\n    //% y.min=0 y.max=240 y.defl=120\n    //% size.min=0 size.max=512 size.defl=256\n    //% inlineInputMode=inline\n    //% weight=58\n    //% group=\"Basics\"\n    export function lcdDisplayGif(num: number, name: string, x: number, y: number, size: number) {\n        updateGif(num, x, y, name, size);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x1 to x1 ,eg: 40\n     * @param y1 to y1 ,eg: 120\n     * @param x2 to x2 ,eg: 300\n     * @param y2 to y2 ,eg: 120\n     * @param width to width ,eg: 20\n     * @param color to color ,eg: 0x007FFF\n     */\n\n    //% block=\"draw line number %num start x1: %x1 y1: %y1 end x2: %x2 y2: %y2 width %width color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x1.min=0 x1.max=320 x1.defl=40\n    //% y1.min=0 y1.max=240 y1.defl=120\n    //% x2.min=0 x2.max=320 x2.defl=300\n    //% y2.min=0 y2.max=240 y2.defl=120\n    //% color.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=55\n    //% group=\"Graph\"\n    //% advanced=true\n    export function lcdDrawLine(num: number, x1: number, y1: number, x2: number, y2: number, width: number, color: number) {\n        updateLine(num, x1, y1, x2, y2, width, color);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 0\n     * @param y to y ,eg: 0\n     * @param w to w ,eg: 300\n     * @param h to h ,eg: 200\n     * @param width to width ,eg: 5\n     * @param bocolor to bocolor ,eg: 0xFF0000\n     * @param fill to fill ,eg: DrawType.Fill\n     * @param fcolor to fcolor ,eg: 0xFFFFFF\n     * @param round to round ,eg: lcdDisplay.RectangleRound.NoneRound\n     */\n\n    //% block=\"draw rectangle number %num start x: %x y: %y width %w height %h line width %width Border color %bocolor %fill color %fcolor %round\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=0\n    //% y.min=0 y.max=240 y.defl=0\n    //% w.min=0 w.max=320 w.defl=300\n    //% h.min=0 h.max=240 h.defl=200\n    //% bocolor.shadow=\"colorNumberPicker\"\n    //% fcolor.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=50\n    //% group=\"Graph\"\n    //% advanced=true\n    export function lcdDrawRectangle(num: number, x: number, y: number, w: number, h: number, width: number, bocolor: number, fill: DrawType, fcolor: number, round: RectangleRound) {\n        updateRect(num, x, y, w, h, width, bocolor, fill === DrawType.Fill ? 1 : 0, fcolor, round === RectangleRound.IsRound ? 1 : 0);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 160\n     * @param y to y ,eg: 120\n     * @param r to r ,eg: 120\n     * @param width to width ,eg: 5\n     * @param bocolor to bocolor ,eg: 0xFF0000\n     * @param fill to fill ,eg: DrawType.Fill\n     * @param fcolor to fcolor ,eg: 0xFFFFFF\n     */\n\n    //% block=\"draw circle number %num center x: %x y: %y radius %r line width %width Border color %bocolor %fill color %fcolor\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=160\n    //% y.min=0 y.max=240 y.defl=120\n    //% r.min=0 r.max=120 r.defl=120\n    //% bocolor.shadow=\"colorNumberPicker\"\n    //% fcolor.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=45\n    //% group=\"Graph\"\n    //% advanced=true\n    export function lcdDrawCircle(num: number, x: number, y: number, r: number, width: number, bocolor: number, fill: DrawType, fcolor: number) {\n        updateCircle(num, x, y, r, width, bocolor, fill === DrawType.Fill ? 1 : 0, fcolor);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x1 to x1 ,eg: 160\n     * @param y1 to y1 ,eg: 0\n     * @param x2 to x2 ,eg: 0\n     * @param y2 to y2 ,eg: 240\n     * @param x3 to x3 ,eg: 320\n     * @param y3 to y3 ,eg: 240\n     * @param width to width ,eg: 5\n     * @param bocolor to bocolor ,eg: 0xFF0000\n     * @param fill to fill ,eg: DrawType.Fill\n     * @param fcolor to fcolor ,eg: 0xFFFFFF\n     */\n\n    //% block=\"draw triangle number %num x1: %x1 y1: %y1 x2: %x2 y2: %y2 x3: %x3 y3: %y3 line width %width Border color %bocolor %fill color %fcolor\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x1.min=0 x1.max=320 x1.defl=160\n    //% y1.min=0 y1.max=240 y1.defl=0\n    //% x2.min=0 x2.max=320 x2.defl=0\n    //% y2.min=0 y2.max=240 y2.defl=240\n    //% x3.min=0 x3.max=320 x3.defl=320\n    //% y3.min=0 y3.max=240 y3.defl=240\n    //% bocolor.shadow=\"colorNumberPicker\"\n    //% fcolor.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=40\n    //% group=\"Graph\"\n    //% advanced=true\n    export function lcdDrawTriangle(num: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, width: number, bocolor: number, fill: DrawType, fcolor: number) {\n        updateTriangle(num, x1, y1, x2, y2, x3, y3, width, bocolor, fill === DrawType.Fill ? 1 : 0, fcolor);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 80\n     * @param y to y ,eg: 120\n     * @param w to w ,eg: 200\n     * @param h to h ,eg: 20\n     * @param color to color ,eg: 0x007FFF\n     */\n\n    //% block=\"draw slider number %num position x: %x y: %y width %w height %h color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=80\n    //% y.min=0 y.max=240 y.defl=120\n    //% w.min=0 w.max=320 w.defl=200\n    //% h.min=0 h.max=240 h.defl=20\n    //% color.shadow=\"colorNumberPicker\"\n    //% expandableArgumentMode=\"toggle\"\n    //% inlineInputMode=inline\n    //% weight=35\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawSlider(num: number, x: number, y: number, w: number, h: number, color: number) {\n        updateSlider(num, x, y, w, h, color);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 80\n     * @param y to y ,eg: 120\n     * @param w to w ,eg: 200\n     * @param h to h ,eg: 20\n     * @param color to color ,eg: 0x007FFF\n     */\n\n    //% block=\"draw bar number %num position x: %x y: %y width %w height %h color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=80\n    //% y.min=0 y.max=240 y.defl=120\n    //% w.min=0 w.max=320 w.defl=200\n    //% h.min=0 h.max=240 h.defl=20\n    //% color.shadow=\"colorNumberPicker\"\n    //% expandableArgumentMode=\"toggle\"\n    //% inlineInputMode=inline\n    //% weight=30\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawBar(num: number, x: number, y: number, w: number, h: number, color: number) {\n        updateBar(num, x, y, w, h, color);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 50\n     * @param y to y ,eg: 0\n     * @param r to r ,eg: 240\n     */\n\n    //% block=\"draw compass number %num position x: %x y: %y radius %r\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=50\n    //% y.min=0 y.max=240 y.defl=0\n    //% r.min=0 r.max=320 r.defl=240\n    //% inlineInputMode=inline\n    //% weight=25\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawCompass(num: number, x: number, y: number, r: number) {\n        updateCompass(num, x, y, r);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 50\n     * @param y to y ,eg: 0\n     * @param r to r ,eg: 240\n     * @param start to start ,eg: 0\n     * @param end to end ,eg: 360\n     * @param color to color ,eg: 0x000000\n     * @param dcolor to dcolor ,eg: 0xFFFFFF\n     */\n\n    //% block=\"draw gauge number %num position x: %x y: %y radius %r start of scale %start End of scale %end Pointer color %color Dial color %dcolor\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=50\n    //% y.min=0 y.max=240 y.defl=0\n    //% r.min=0 r.max=320 r.defl=240\n    //% start.min=0 start.max=360 start.defl=0\n    //% end.min=0 end.max=360 end.defl=360\n    //% color.shadow=\"colorNumberPicker\"\n    //% dcolor.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=20\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawGauge(num: number, x: number, y: number, r: number, start: number, end: number, color: number, dcolor: number) {\n        updateGauge(num, x, y, r, start, end, color, dcolor);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 0\n     * @param y to y ,eg: 0\n     * @param r to r ,eg: 240\n     * @param start to start ,eg: 0\n     * @param end to end ,eg: 100\n     * @param color to color ,eg: 0x000000\n     * @param dcolor to dcolor ,eg: 0xFFFFFF\n     */\n\n    //% block=\"draw lineMeter number %num position x: %x y: %y radius %r start of scale %start End of scale %end Data color %color Dial color %dcolor\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=0\n    //% y.min=0 y.max=240 y.defl=0\n    //% r.min=0 r.max=320 r.defl=240\n    //% start.min=0 start.max=360 start.defl=0\n    //% end.min=0 end.max=360 end.defl=100\n    //% color.shadow=\"colorNumberPicker\"\n    //% dcolor.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=18\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawLineMeter(num: number, x: number, y: number, r: number, start: number, end: number, color: number, dcolor: number) {\n        updateLineMeter(num, x, y, r, start, end, color, dcolor);\n    }\n\n    /**\n     * ...\n     * @param type to type ,eg: LCDWidgetCategoryOne.Slider\n     * @param num to num ,eg: 1\n     * @param data to data ,eg: 80\n     */\n\n    //% block=\"set %type=LCDWidgetCategoryOne_conv widget number %num data %data\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% weight=17\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdSetWidgetData(type: number, num: number, data: number) {\n        switch (type) {\n            case LCDWidgetCategoryOne.Slider:\n                setSliderValue(num, data);\n                break;\n            case LCDWidgetCategoryOne.Bar:\n                setBarValue(num, data);\n                break;\n            case LCDWidgetCategoryOne.Compass:\n                setCompassScale(num, (data / 360) * 3600);\n                break;\n            case LCDWidgetCategoryOne.Gauge:\n                setGaugeValue(num, data);\n                break;\n            case LCDWidgetCategoryOne.LineMeter:\n                setMeterValue(num, data);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param xaxis to xaxis ,eg: \"Jan Feb Mar Apr May Jun\"\n     * @param yaxis to yaxis ,eg: \"100 80 60 40 20 0\"\n     * @param color to color ,eg: 0xFFFFFF\n     * @param styles to styles ,eg: ChartStyles.LineChart\n     */\n\n    //% block=\"draw chart number %num X-axis %xaxis Y-axis %yaxis background color %color styles %styles\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% color.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=16\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawChart(num: number, xaxis: string, yaxis: string, color: number, styles: ChartStyles) {\n        chartID = num;\n        axisListX = xaxis.split(\" \");\n        axisListY = yaxis.split(\" \");\n        axisListX.forEach((value, index) => { axisYData.push(0) });\n        dataFactor = Math.abs((parseInt(axisListY[0]) - parseInt(axisListY[axisListY.length-1])) / 100);\n        updateChart(chartID, color, styles);\n        basic.pause(100);\n        setChartAxisTexts(chartID, 0, axisListX);\n        basic.pause(100);\n        setChartAxisTexts(chartID, 1, axisListY);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param color to color ,eg: 0xFF0000\n     */\n\n    //% block=\"Set chart data number %num color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% color.shadow=\"colorNumberPicker\"\n    //% weight=14\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdAddChartData(num: number, color: number) {\n        seriesData[num] = axisYData;\n        updateChartSeries(chartID, num, color);\n        addChartSeriesData(chartID, num, seriesData[num], axisListY.length)\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param xaxis to xaxis ,eg: \"Jan\"\n     * @param data to data ,eg: 80\n     */\n\n    //% block=\"set chart data number %num X-axis %xaxis data %data\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% weight=12\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdSetChartData(num: number, xaxis: string, data: number) {\n        let index = axisListX.indexOf(xaxis);\n        if (index !== -1) {\n            updateChartPoint(chartID, num, index, Math.round(data / dataFactor));\n            // seriesData[num][index] = Math.round(data / 10);\n        }\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param color to color ,eg: 0x007FFF\n     * @param styles to styles ,eg: lcdDisplay.ChartStyles.BarChart\n     */\n\n    //% block=\"update chart number %num background color %color styles %styles\"\n    //% color.shadow=\"colorNumberPicker\"\n    //% weight=11\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdUpdateChart(num: number, color: number, styles: ChartStyles) {\n        updateChart(num, color, styles);\n    }\n\n    /**\n     * ...\n     * @param type to type ,eg: LCDWidgetCategoryTwo.Text\n     * @param num to num ,eg: 1\n     */\n\n    //% block=\"delete %type=LCDWidgetCategoryTwo_conv number %num\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% weight=8\n    //% group=\"Basics\"\n    export function lcdDeleteWidget(type: number, num: number) {\n        switch (type) {\n            case LCDWidgetCategoryTwo.Slider:\n                deleteSlider(num);\n                break;\n            case LCDWidgetCategoryTwo.Bar:\n                deleteBar(num);\n                break;\n            case LCDWidgetCategoryTwo.Compass:\n                deleteCompass(num);\n                break;\n            case LCDWidgetCategoryTwo.Gauge:\n                deleteGauge(num);\n                break;\n            case LCDWidgetCategoryTwo.LineMeter:\n                deleteLineMeter(num);\n                break;\n            case LCDWidgetCategoryTwo.Chart:\n                deleteChart(num);\n                break;\n            case LCDWidgetCategoryTwo.Text:\n                deleteString(num);\n                break;\n            case LCDWidgetCategoryTwo.Line:\n                deleteLine(num);\n                break;\n            case LCDWidgetCategoryTwo.Rectangle:\n                deleteRect(num);\n                break;\n            case LCDWidgetCategoryTwo.Circle:\n                deleteCircle(num);\n                break;\n            case LCDWidgetCategoryTwo.Triangle:\n                deleteTriangle(num);\n                break;\n            case LCDWidgetCategoryTwo.Icon:\n                deleteIcon(num);\n                break;\n            case LCDWidgetCategoryTwo.Gif:\n                deleteGif(num);\n            default:\n                break;\n        }\n    }\n\n    /**\n     * return the corresponding LCDWidgetCategoryOne number\n     */\n    //% blockId=\"LCDWidgetCategoryOne_conv\" block=\"%item\"\n    //% weight=2 blockHidden=true\n    export function getWidgetCategoryOne(item: LCDWidgetCategoryOne): number {\n        return item as number;\n    }\n\n    /**\n     * return the corresponding LCDWidgetCategoryTwo number\n     */\n    //% blockId=\"LCDWidgetCategoryTwo_conv\" block=\"%item\"\n    //% weight=1 blockHidden=true\n    export function getLCDWidgetCategoryTwo(item: LCDWidgetCategoryTwo): number {\n        return item as number;\n    }\n\n    function cleanScreen() {\n        let cmd = creatCommand(0x1D, 0x04);\n        writeCommand(cmd, 4);\n        basic.pause(1500);\n    }\n\n    function setBackgroundColor(color: number) {\n        let cmd = creatCommand(CMD_SET_BACKGROUND_COLOR, CMD_SET_LEN);\n        cmd = cmd.concat(data24Tobyte(color));\n        writeCommand(cmd, CMD_SET_LEN);\n        basic.pause(300);\n    }\n\n    function setBackgroundImg(location: number, str: string) {\n        let len = str.length;\n        let cmd = creatCommand(CMD_SET_BACKGROUND_IMG, len + 5);\n        cmd = cmd.concat([location]);\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 5);\n    }\n\n    function drawString(x: number, y: number, str: string, fontSize: number, color: number) {\n        let len = str.length > 242 ? 242 : str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_TEXT, len + 13);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_TEXT), fontSize]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 13);\n    }\n\n    function updateString(id: number, x: number, y: number, str: string, fontSize: number, color: number) {\n        let len = str.length > 242 ? 242 : str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_TEXT, len + 13);\n        cmd = cmd.concat([id, fontSize]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 13);\n    }\n\n    function deleteString(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_TEXT, id])\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.textHead, id);\n    }\n\n    function drawLcdTime(x: number, y: number, hour: number, min: number, sec: number, fontSize: number, color: number) {\n        drawString(x, y, `${hour < 10 ? \"0\" + hour : \"\" + hour}:${min < 10 ? \"0\" + min : \"\" + min}:${sec < 10 ? \"0\" + sec : \"\" + sec}`, fontSize, color);\n    }\n\n    function updateLcdTime(id: number, x: number, y: number, hour: number, min: number, sec: number, fontSize: number, color: number) {\n        updateString(id, x, y, `${hour < 10 ? \"0\" + hour : \"\" + hour}:${min < 10 ? \"0\" + min : \"\" + min}:${sec < 10 ? \"0\" + sec : \"\" + sec}`, fontSize, color);\n    }\n\n    function drawIcon(x: number, y: number, str: string, zoom: number) {\n        let len = str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_ICON_EXTERNAL, len + 11);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_ICON_INTERNAL)]).concat(data16Tobyte(zoom)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 11);\n    }\n\n    function setAngleIcon(id: number, angle: number) {\n        let cmd = creatCommand(CMD_SET_ANGLE_OBJ, CMD_SET_ANGLE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_ICON_INTERNAL, id]).concat(data16Tobyte(angle));\n        writeCommand(cmd, CMD_SET_ANGLE_OBJ_LEN);\n    }\n\n    function updateIcon(id: number, x: number, y: number, str: string, zoom: number) {\n        let len = str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_ICON_EXTERNAL, len + 11);\n        cmd = cmd.concat([id]).concat(data16Tobyte(zoom)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 11);\n    }\n\n    function deleteIcon(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_ICON_INTERNAL, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.iconHead, id);\n    }\n\n    function drawGif(x: number, y: number, str: string, zoom: number): number {\n        let len = str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_GIF_EXTERNAL, len + 11);\n        let id = getID(CMD_OF_DRAW_GIF_EXTERNAL);\n        cmd = cmd.concat([id]).concat(data16Tobyte(zoom)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 11);\n        return id;\n    }\n\n    function updateGif(id: number, x: number, y: number, str: string, zoom: number) {\n        let len = str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_GIF_EXTERNAL, len + 11);\n        cmd = cmd.concat([id]).concat(data16Tobyte(zoom)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 11);\n    }\n\n    function deleteGif(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_GIF_INTERNAL, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.gifHead, id);\n    }\n\n    function drawLine(x0: number, y0: number, x1: number, y1: number, width: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE, CMD_DRAW_LINE_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_LINE), width]).concat(data24Tobyte(color)).concat(data16Tobyte(x0)).concat(data16Tobyte(y0)).concat(data16Tobyte(x1)).concat(data16Tobyte(y1));\n        writeCommand(cmd, CMD_DRAW_LINE_LEN);\n    }\n\n    function updateLine(id: number, x0: number, y0: number, x1: number, y1: number, width: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE, CMD_DRAW_LINE_LEN);\n        cmd = cmd.concat([id, width]).concat(data24Tobyte(color)).concat(data16Tobyte(x0)).concat(data16Tobyte(y0)).concat(data16Tobyte(x1)).concat(data16Tobyte(y1));\n        writeCommand(cmd, CMD_DRAW_LINE_LEN);\n        basic.pause(10);\n    }\n\n    function deleteLine(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_LINE, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.lineHead, id);\n    }\n\n    function drawRect(x: number, y: number, w: number, h: number, bw: number, boColor: number, fill: number, fillColor: number, rounded: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_RECT, CMD_OF_DRAW_RECT_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_RECT), bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat([rounded]).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_RECT_LEN);\n    }\n\n    function updateRect(id: number, x: number, y: number, w: number, h: number, bw: number, boColor: number, fill: number, fillColor: number, rounded: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_RECT, CMD_OF_DRAW_RECT_LEN);\n        cmd = cmd.concat([id, bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat([rounded]).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_RECT_LEN);\n    }\n\n    function deleteRect(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_RECT, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.rectHead, id);\n    }\n\n    function drawCircle(x: number, y: number, r: number, bw: number, boColor: number, fill: number, fillColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_CIRCLE, CMD_OF_DRAW_CIRCLE_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_CIRCLE), bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat(data16Tobyte(r)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_CIRCLE_LEN);\n    }\n\n    function updateCircle(id: number, x: number, y: number, r: number, bw: number, boColor: number, fill: number, fillColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_CIRCLE, CMD_OF_DRAW_CIRCLE_LEN);\n        cmd = cmd.concat([id, bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat(data16Tobyte(r)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_CIRCLE_LEN);\n    }\n\n    function deleteCircle(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_CIRCLE, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.circleHead, id);\n    }\n\n    function drawTriangle(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, bw: number, boColor: number, fill: number, fillColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_TRIANGLE, CMD_OF_DRAW_TRIANGLE_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_TRIANGLE), bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat(data16Tobyte(x0)).concat(data16Tobyte(y0)).concat(data16Tobyte(x1)).concat(data16Tobyte(y1)).concat(data16Tobyte(x2)).concat(data16Tobyte(y2));\n        writeCommand(cmd, CMD_OF_DRAW_TRIANGLE_LEN);\n    }\n\n    function updateTriangle(id: number, x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, bw: number, boColor: number, fill: number, fillColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_TRIANGLE, CMD_OF_DRAW_TRIANGLE_LEN);\n        cmd = cmd.concat([id, bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat(data16Tobyte(x0)).concat(data16Tobyte(y0)).concat(data16Tobyte(x1)).concat(data16Tobyte(y1)).concat(data16Tobyte(x2)).concat(data16Tobyte(y2));\n        writeCommand(cmd, CMD_OF_DRAW_TRIANGLE_LEN);\n    }\n\n    function deleteTriangle(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_TRIANGLE, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.triangleHead, id);\n    }\n\n    function creatSlider(x: number, y: number, w: number, h: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_SLIDER, CMD_OF_DRAW_SLIDER_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_SLIDER)]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_SLIDER_LEN);\n    }\n\n    function updateSlider(id: number, x: number, y: number, w: number, h: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_SLIDER, CMD_OF_DRAW_SLIDER_LEN);\n        cmd = cmd.concat([id]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_SLIDER_LEN);\n    }\n\n    function setSliderValue(id: number, value: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_SLIDER_VALUE, CMD_SET_SLIDER_VALUE_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(value));\n        writeCommand(cmd, CMD_SET_SLIDER_VALUE_LEN);\n    }\n\n    function deleteSlider(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_SLIDER, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.sliderHead, id);\n    }\n\n    function creatBar(x: number, y: number, w: number, h: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_BAR, CMD_OF_DRAW_BAR_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_BAR)]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_BAR_LEN);\n    }\n\n    function updateBar(id: number, x: number, y: number, w: number, h: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_BAR, CMD_OF_DRAW_BAR_LEN);\n        cmd = cmd.concat([id]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_BAR_LEN);\n    }\n\n    function setBarValue(id: number, value: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_BAR_VALUE, CMD_SET_BAR_VALUE_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(value));\n        writeCommand(cmd, CMD_SET_BAR_VALUE_LEN);\n    }\n\n    function deleteBar(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_BAR, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.barHead, id);\n    }\n\n    function creatCompass(x: number, y: number, diameter: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_COMPASS, CMD_DRAW_COMPASS_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_COMPASS)]).concat(data16Tobyte(diameter)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_DRAW_COMPASS_LEN);\n    }\n\n    function updateCompass(id: number, x: number, y: number, diameter: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_COMPASS, CMD_DRAW_COMPASS_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(diameter)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_DRAW_COMPASS_LEN);\n    }\n\n    function setCompassScale(id: number, scale: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_COMPASS_VALUE, CMD_SET_COMPASS_VALUE_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(scale));\n        writeCommand(cmd, CMD_SET_COMPASS_VALUE_LEN);\n    }\n\n    function deleteCompass(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_COMPASS, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.compassHead, id);\n    }\n\n    function creatGauge(x: number, y: number, diameter: number, start: number, end: number, pointerColor: number, bgColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_GAUGE, CMD_OF_DRAW_GAUGE_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_GAUGE)]).concat(data16Tobyte(diameter)).concat(data16Tobyte(start)).concat(data16Tobyte(end)).concat(data24Tobyte(pointerColor)).concat(data24Tobyte(bgColor)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_GAUGE_LEN);\n    }\n\n    function updateGauge(id: number, x: number, y: number, diameter: number, start: number, end: number, pointerColor: number, bgColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_GAUGE, CMD_OF_DRAW_GAUGE_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(diameter)).concat(data16Tobyte(start)).concat(data16Tobyte(end)).concat(data24Tobyte(pointerColor)).concat(data24Tobyte(bgColor)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_GAUGE_LEN);\n    }\n\n    function setGaugeValue(id: number, value: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_GAUGE_VALUE, CMD_SET_GAUGE_VALUE_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(value));\n        writeCommand(cmd, CMD_SET_GAUGE_VALUE_LEN);\n    }\n\n    function deleteGauge(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_GAUGE, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.gaugeHead, id);\n    }\n\n    function creatLineMeter(x: number, y: number, size: number, start: number, end: number, pointerColor: number, bgColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_METER, CMD_OF_DRAW_LINE_METER_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_LINE_METER)]).concat(data16Tobyte(size)).concat(data16Tobyte(start)).concat(data16Tobyte(end)).concat(data24Tobyte(pointerColor)).concat(data24Tobyte(bgColor)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_LINE_METER_LEN);\n    }\n\n    function updateLineMeter(id: number, x: number, y: number, size: number, start: number, end: number, pointerColor: number, bgColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_METER, CMD_OF_DRAW_LINE_METER_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(size)).concat(data16Tobyte(start)).concat(data16Tobyte(end)).concat(data24Tobyte(pointerColor)).concat(data24Tobyte(bgColor)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_LINE_METER_LEN);\n    }\n\n    function setTopLineMeter(id: number) {\n        let cmd = creatCommand(CMD_SET_TOP_OBJ, CMD_SET_TOP_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_LINE_METER, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n    }\n\n    function deleteLineMeter(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_LINE_METER, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.lineMeterHead, id);\n    }\n\n    function creatChart(strX: string[], strY: string[], bgColor: number, type: number): number {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_CHART, CMD_DRAW_CHART_LEN);\n        let id = getID(CMD_OF_DRAW_LINE_CHART);\n        cmd = cmd.concat([id, type]).concat(data24Tobyte(bgColor));\n        writeCommand(cmd, CMD_DRAW_CHART_LEN);\n        basic.pause(100);\n        setChartAxisTexts(id, 0, strX);\n        basic.pause(100);\n        setChartAxisTexts(id, 1, strY);\n        return id;\n    }\n\n    function updateChart(id: number, bgColor: number, type: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_CHART, CMD_DRAW_CHART_LEN);\n        cmd = cmd.concat([id, type]).concat(data24Tobyte(bgColor));\n        writeCommand(cmd, CMD_DRAW_CHART_LEN);\n    }\n\n    function creatChartSeries(chartId: number, color: number): number {\n        let cmd = creatCommand(CMD_OF_DRAW_SERIE, CMD_DRAW_SERIE_LEN);\n        let serieId = getID(CMD_OF_DRAW_SERIE);\n        cmd = cmd.concat([serieId, chartId]).concat(data24Tobyte(color));\n        writeCommand(cmd, CMD_DRAW_SERIE_LEN);\n        return serieId;\n    }\n\n    function updateChartSeries(chartId: number, seriesId: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_SERIE, CMD_DRAW_SERIE_LEN);\n        cmd = cmd.concat([seriesId, chartId]).concat(data24Tobyte(color));\n        writeCommand(cmd, CMD_DRAW_SERIE_LEN);\n    }\n\n    function setChartAxisTexts(chartId: number, axis: number, text: string[]) {\n        let len = text.length - 1;\n        text.forEach((value, index) => { len = len + value.length });\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_CHART_TEXT, len + 6);\n        cmd = cmd.concat([chartId, axis]);\n        for (let i = 0; i < text.length; i++) {\n            text[i].split(\"\").forEach((value, index) => {\n                cmd.push(value.charCodeAt(0))\n            })\n            if (i != text.length - 1) {\n                cmd.push(0x0A); // \"\\n\"\n            }\n        }\n        writeCommand(cmd, len + 6);\n    }\n\n    function updateChartPoint(chartId: number, seriesId: number, pointNum: number, value: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_SERIE_DATA, 10);\n        cmd = cmd.concat([chartId, seriesId, 1, pointNum]).concat(data16Tobyte(value));\n        writeCommand(cmd, 10);\n    }\n\n    function addChartSeriesData(chartId: number, seriesId: number, point: number[], len: number): number {\n        let cmd = creatCommand(CMD_OF_DRAW_SERIE_DATA, len * 2 + 8);\n        cmd = cmd.concat([chartId, seriesId, 0, 0]);\n        point.forEach((value, index) => { cmd = cmd.concat(data16Tobyte(value)) });\n        writeCommand(cmd, len * 2 + 8);\n        return 1;\n    }\n\n    function setTopChart(id: number) {\n        let cmd = creatCommand(CMD_SET_TOP_OBJ, CMD_SET_TOP_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_LINE_CHART, id]);\n        writeCommand(cmd, CMD_SET_TOP_OBJ_LEN);\n    }\n\n    function deleteChart(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_LINE_CHART, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.lineChartHead, id);\n    }\n\n    function setMeterValue(lineMeterId: number, value: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_METER_VALUE, CMD_SET_LINE_METER_VALUE_LEN);\n        cmd = cmd.concat([lineMeterId]).concat(data16Tobyte(value));\n        writeCommand(cmd, CMD_SET_LINE_METER_VALUE_LEN);\n    }\n\n\n    /********************************************************************************************************************/\n    function creatList() {\n        list.lineChartHead = new LinkedList();\n        list.seriesHead = new LinkedList();\n        list.compassHead = new LinkedList();\n        list.textHead = new LinkedList();\n        list.gaugeHead = new LinkedList();\n        list.lineHead = new LinkedList();\n        list.rectHead = new LinkedList();\n        list.circleHead = new LinkedList();\n        list.triangleHead = new LinkedList();\n        list.lineMeterHead = new LinkedList();\n        list.barHead = new LinkedList();\n        list.sliderHead = new LinkedList();\n        list.iconHead = new LinkedList();\n        list.gifHead = new LinkedList();\n    }\n\n    function getID(type: number): number {\n        let id = 0;\n        switch (type) {\n            case CMD_OF_DRAW_LINE_CHART:\n                id = getNewID(list.lineChartHead);\n                break;\n            case CMD_OF_DRAW_SERIE:\n                id = getNewID(list.seriesHead);\n                break;\n            case CMD_OF_DRAW_COMPASS:\n                id = getNewID(list.compassHead);\n                break;\n            case CMD_OF_DRAW_TEXT:\n                id = getNewID(list.textHead);\n                break;\n            case CMD_OF_DRAW_GAUGE:\n                id = getNewID(list.gaugeHead);\n                break;\n            case CMD_OF_DRAW_LINE:\n                id = getNewID(list.lineHead);\n                break;\n            case CMD_OF_DRAW_RECT:\n                id = getNewID(list.rectHead);\n                break;\n            case CMD_OF_DRAW_TRIANGLE:\n                id = getNewID(list.triangleHead);\n                break;\n            case CMD_OF_DRAW_CIRCLE:\n                id = getNewID(list.circleHead);\n                break;\n            case CMD_OF_DRAW_LINE_METER:\n                id = getNewID(list.lineMeterHead);\n                break;\n            case CMD_OF_DRAW_BAR:\n                id = getNewID(list.barHead);\n                break;\n            case CMD_OF_DRAW_SLIDER:\n                id = getNewID(list.sliderHead);\n                break;\n            case CMD_OF_DRAW_ICON_INTERNAL:\n                id = getNewID(list.iconHead);\n                break;\n            case CMD_OF_DRAW_GIF_INTERNAL:\n                id = getNewID(list.gifHead);\n                break;\n            default:\n                break;\n        }\n        return id;\n    }\n\n    function getNewID(linkList: LinkedList): number {\n        linkList.append();\n        return linkList.head.id;\n    }\n\n    function deleteNodeByID(linkList: LinkedList, id: number) {\n        linkList.removeId(id);\n    }\n\n    function data16Tobyte(data: number): number[] {\n        return [(data >> 8) & 0xFF, data & 0xFF];\n    }\n\n    function data24Tobyte(data: number): number[] {\n        return [(data >> 16) & 0xFF, (data >> 8) & 0xFF, data & 0xFF];\n    }\n\n    function colorToCustom(color: number): number {\n        switch (color) {\n            case 0x999999:\n                return 0x696969;\n            case 0x7f00ff:\n                return 0x800080;\n            default:\n                return color;\n        }\n    }\n\n    function creatCommand(cmd: number, len: number): number[] {\n        return [CMD_HEADER_HIGH, CMD_HEADER_LOW, len - CMDLEN_OF_HEAD_LEN, cmd];\n    }\n\n    function writeCommand(data: number[], len: number) {\n        // serial.writeNumbers(data);\n        if (protocol == Protocol.IIC) {\n            let remain = len;\n            let i = 0;\n            while (remain > 0) {\n                let currentTransferSize = (remain > IIC_MAX_TRANSFER_SIZE) ? 32 : remain;\n                if (remain > IIC_MAX_TRANSFER_SIZE) {\n                    pins.i2cWriteBuffer(address, pins.createBufferFromArray(data.slice(i * IIC_MAX_TRANSFER_SIZE, i * IIC_MAX_TRANSFER_SIZE + currentTransferSize)), true);\n                } else {\n                    pins.i2cWriteBuffer(address, pins.createBufferFromArray(data.slice(i * IIC_MAX_TRANSFER_SIZE, i * IIC_MAX_TRANSFER_SIZE + currentTransferSize)), false);\n                }\n                remain = remain - currentTransferSize;\n                i = i + 1;\n            }\n        } else {\n\n        }\n    }\n\n    function readACK(length: number): Buffer {\n        if (protocol == Protocol.IIC) {\n            let remain = length;\n            let buf: Buffer = pins.createBuffer(0);\n            while (remain) {\n                let currentTransferSize = (remain > IIC_MAX_TRANSFER_SIZE) ? IIC_MAX_TRANSFER_SIZE : remain;\n                buf = buf.concat(pins.i2cReadBuffer(address, currentTransferSize));\n                remain = remain - currentTransferSize;\n            }\n            return buf;\n        } else {\n            let buf: Buffer = pins.createBuffer(0);\n            return buf;\n        }\n    }\n}","README.md":"","pxt.json":"{\n    \"name\": \"lcdDisplay\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1739961544952,"editorVersion":"7.0.57","text":{"main.blocks":"","main.ts":"\nconst enum LCDWidgetCategoryOne {\n    //% block=\"Slider(01)\"\n    Slider = 1,\n    //% block=\"Bar(02)\"\n    Bar = 2,\n    //% block=\"Compass(03)\"\n    Compass = 3,\n    //% block=\"Gauge(04)\"\n    Gauge = 4,\n    //% block=\"LineMeter(05)\"\n    LineMeter = 5,\n}\n\nconst enum LCDWidgetCategoryTwo {\n    //% block=\"Slider(01)\"\n    Slider = 1,\n    //% block=\"Bar(02)\"\n    Bar = 2,\n    //% block=\"Compass(03)\"\n    Compass = 3,\n    //% block=\"Gauge(04)\"\n    Gauge = 4,\n    //% block=\"LineMeter(05)\"\n    LineMeter = 5,\n    //% block=\"LineMeter(06)\"\n    Chart = 6,\n    //% block=\"Text(07)\"\n    Text = 7,\n    //% block=\"Line(08)\"\n    Line = 8,\n    //% block=\"Rectangle(09)\"\n    Rectangle = 9,\n    //% block=\"Circle(10)\"\n    Circle = 10,\n    //% block=\"Triangle(11)\"\n    Triangle = 11,\n    //% block=\"Icon(12)\"\n    Icon = 12,\n    //% block=\"Gif(13)\"\n    Gif = 13,\n}\n\n//% block=\"ColorScreen\"\n//% weight=100 color=#5b3fe8 icon=\"\\uf022\"\n//% groups=\"['Basics', 'Graph', \"Widget\"]\"\nnamespace lcdDisplay {\n\n    export enum FontSize {\n        //% block=\"Large\"\n        Large = 1,\n        //% block=\"Small\"\n        Small = 2,\n    }\n\n    export enum RectangleRound {\n        //% block=\"RC\"\n        IsRound = 1,\n        //% block=\"not RC\"\n        NoneRound = 2,\n    }\n\n    export enum ChartStyles {\n        //% block=\"LineChart\"\n        LineChart = 3,\n        //% block=\"BarChart\"\n        BarChart = 2,\n        //% block=\"ShadingLineChart\"\n        ShadingLineChart = 1,\n    }\n\n    export enum DrawType {\n        //% block=\"fill\"\n        Fill = 1,\n        //% block=\"not fill\"\n        NotFill = 2,\n    }\n\n    export enum Protocol {\n        IIC = 1,\n        Serial = 2,\n    }\n\n\n    const IIC_MAX_TRANSFER_SIZE = 32;\n\n    // cmd len\n    const CMDLEN_OF_HEAD_LEN = 3;\n    const CMD_DELETE_OBJ_LEN = 0x06;\n    const CMD_SET_TOP_OBJ_LEN = 0x06;\n    const CMD_SET_COMPASS_VALUE_LEN = 0x07;\n    const CMD_SET_LEN = 0x07;\n    const CMD_SET_GAUGE_VALUE_LEN = 0x07;\n    const CMD_SET_LINE_METER_VALUE_LEN = 0x07;\n    const CMD_SET_BAR_VALUE_LEN = 0x07;\n    const CMD_SET_SLIDER_VALUE_LEN = 0x07;\n    const CMD_SET_ANGLE_OBJ_LEN = 0x08;\n    const CMD_DRAW_COMPASS_LEN = 0x0B;\n    const CMD_DRAW_CHART_LEN = 0x09;\n    const CMD_DRAW_SERIE_LEN = 0x09;\n    const CMD_OF_DRAW_ICON_INTERNAL_LEN = 0x0D;\n    const CMD_OF_DRAW_GIF_INTERNAL_LEN = 0x0D;\n    const CMD_OF_DRAW_BAR_LEN = 0x10;\n    const CMD_OF_DRAW_SLIDER_LEN = 0x10;\n    const CMD_DRAW_PIXEL_LEN = 0x11;\n    const CMD_DRAW_LINE_LEN = 0x11;\n    const CMD_OF_DRAW_CIRCLE_LEN = 0x13;\n    const CMD_OF_DRAW_GAUGE_LEN = 0x15;\n    const CMD_OF_DRAW_LINE_METER_LEN = 0x15;\n    const CMD_OF_DRAW_RECT_LEN = 0x16;\n    const CMD_OF_DRAW_TRIANGLE_LEN = 0x19;\n\n    // cmd\n    const CMD_SET_BACKGROUND_COLOR = 0x19;\n    const CMD_SET_BACKGROUND_IMG = 0x1A;\n    const CMD_OF_DRAW_PIXEL = 0x02;\n    const CMD_OF_DRAW_LINE = 0x03;\n    const CMD_OF_DRAW_RECT = 0x04;\n    const CMD_OF_DRAW_CIRCLE = 0x06;\n    const CMD_OF_DRAW_TRIANGLE = 0x07;\n    const CMD_OF_DRAW_ICON_INTERNAL = 0x08;\n    const CMD_OF_DRAW_ICON_EXTERNAL = 0x09;\n    const CMD_OF_DRAW_BAR = 0x0A;\n    const CMD_OF_DRAW_BAR_VALUE = 0x0B;\n    const CMD_OF_DRAW_SLIDER = 0x0C;\n    const CMD_OF_DRAW_SLIDER_VALUE = 0x0D;\n    const CMD_OF_DRAW_LINE_METER = 0x10;\n    const CMD_OF_DRAW_LINE_METER_VALUE = 0x11;\n    const CMD_OF_DRAW_COMPASS = 0x0E;\n    const CMD_OF_DRAW_COMPASS_VALUE = 0x0F;\n    const CMD_OF_DRAW_GAUGE = 0x12;\n    const CMD_OF_DRAW_GAUGE_VALUE = 0x13;\n    const CMD_OF_DRAW_LINE_CHART = 0x14;\n    const CMD_OF_DRAW_LINE_CHART_TEXT = 0x15;\n    const CMD_OF_DRAW_SERIE = 0x16;\n    const CMD_OF_DRAW_SERIE_DATA = 0x17;\n    const CMD_OF_DRAW_TEXT = 0x18;\n    const CMD_DELETE_OBJ = 0x1B;\n    const CMD_SET_TOP_OBJ = 0x1C;\n    const CMD_SET_ANGLE_OBJ = 0x1E;\n    const CMD_OF_DRAW_GIF_INTERNAL = 0x1F;\n    const CMD_OF_DRAW_GIF_EXTERNAL = 0x20;\n\n    const CMD_HEADER_HIGH = 0x55;\n    const CMD_HEADER_LOW = 0xaa;\n\n    let address = 0x2c;\n    class GenericNode {\n        id: number\n        next: GenericNode\n        constructor(id: number) {\n            this.id = id;\n            this.next = null;\n        }\n    }\n\n    class LinkedList {\n        head: GenericNode\n        size: number\n        id: number\n        constructor() {\n            this.head = null;\n            this.size = 0;\n            this.id = 1;\n        }\n\n        // adds a node to the end of the linked list\n        append() {\n            const newNode = new GenericNode(this.id);\n            if (this.head == null) {\n                this.head = newNode;\n            } else {\n                let current = this.head;\n                while (current.next != null) {\n                    current = current.next;\n                }\n                current.next = newNode;\n            }\n            this.size++;\n            this.id++;\n        }\n        // insert a node at a specific location\n        insert(index: number, id: number): boolean {\n            if (index < 0 || index > this.size) {\n                return false;\n            }\n            const newNode = new GenericNode(id);\n            if (index == 0) {\n                newNode.next = this.head;\n                this.head = newNode;\n            } else {\n                let current = this.head;\n                let previous = null;\n                let i = 0;\n                while (i < index) {\n                    previous = current;\n                    current = current.next;\n                    i++;\n                }\n                newNode.next = current;\n                previous.next = newNode;\n            }\n            this.size++;\n            return true;\n        }\n        // removes a node at a specific location\n        removeAt(index: number): boolean {\n            if (index < 0 || index >= this.size || this.head == null) {\n                return false;\n            }\n            let current = this.head;\n            if (index == 0) {\n                this.head = current.next;\n            } else {\n                let previous = null;\n                let i = 0;\n                while (i < index) {\n                    previous = current;\n                    current = current.next;\n                    i++;\n                }\n                previous.next = current.next;\n            }\n            this.size--;\n            return true;\n        }\n\n        // example Remove a node with a specific id\n        removeId(id: number): boolean {\n            if (this.head == null) {\n                return false;\n            }\n            let current = this.head;\n            if (current.id == id) {\n                this.head = current.next;\n            } else {\n                let previous = null;\n                while (current.id != id) {\n                    previous = current;\n                    current = current.next;\n                }\n                previous.next = current.next;\n            }\n            this.size--;\n            return true;\n        }\n    }\n\n    type GenericList = {\n        lineChartHead: LinkedList | null,\n        seriesHead: LinkedList | null,\n        compassHead: LinkedList | null,\n        textHead: LinkedList | null,\n        gaugeHead: LinkedList | null,\n        lineHead: LinkedList | null,\n        rectHead: LinkedList | null,\n        circleHead: LinkedList | null,\n        triangleHead: LinkedList | null,\n        lineMeterHead: LinkedList | null,\n        barHead: LinkedList | null,\n        sliderHead: LinkedList | null,\n        iconHead: LinkedList | null,\n        gifHead: LinkedList | null,\n    }\n\n    let list: GenericList = {\n        lineChartHead: null,\n        seriesHead: null,\n        compassHead: null,\n        textHead: null,\n        gaugeHead: null,\n        lineHead: null,\n        rectHead: null,\n        circleHead: null,\n        triangleHead: null,\n        lineMeterHead: null,\n        barHead: null,\n        sliderHead: null,\n        iconHead: null,\n        gifHead: null,\n    }\n    let protocol: Protocol = Protocol.IIC;\n    let chartID = 0;\n    let axisListX: string[] = [];\n    let axisListY: string[] = [];\n    let axisYData: number[] = [];\n    let seriesData: any = {};\n    let dataFactor = 1; // \"data coordinate conversion factors\n\n    /**\n     * ...\n     */\n\n    //% block=\"ColorScreen I2C initialization\"\n    //% weight=100\n    //% group=\"Basics\"\n    export function lcdInitIIC() {\n        creatList();\n        protocol = Protocol.IIC;\n        basic.pause(1000);\n        \n    }\n\n    /**\n     * ...\n     */\n\n    //% block=\"clear the screen\" \n    //% weight=95\n    //% group=\"Basics\"\n    export function lcdClearAll() {\n        cleanScreen();\n    }\n\n    /**\n     * ...\n     * @param color to color ,eg: 0xFF0000\n     */\n\n    //% block=\"set the background color %color\"\n    //% color.shadow=\"colorNumberPicker\" \n    //% weight=90\n    //% group=\"Basics\"\n    export function lcdSetBgcolor(color: number) {\n        setBackgroundColor(colorToCustom(color));\n    }\n\n    /**\n     * Convert red, green and blue channels into a RGB color\n     * @param red to red ,eg: 255\n     * @param green to green ,eg: 255\n     * @param blue to blue ,eg: 255\n     */\n\n    //% block=\"red %red green %green blue %blue\"\n    //% red.min=0 red.max=255 red.defl=255\n    //% green.min=0 green.max=255 green.defl=255\n    //% blue.min=0 blue.max=255 blue.defl=255\n    //% weight=85\n    //% group=\"Basics\"\n    export function lcdGetRgbColor(red: number, green: number, blue: number): number {\n        return (red << 16) + (green << 8) + (blue);\n    }\n\n    /**\n     * ...\n     * @param picture to picture ,eg: \"fruit.png\"\n     */\n\n    //% block=\"set the background picture %picture\"\n    //% weight=80\n    //% group=\"Basics\"\n    export function lcdSetBgIamge(picture: string) {\n        // setBackgroundImg(0, picture); // Internal storage of pictures\n        setBackgroundImg(1, picture); // Usb flash drive to store pictures\n    }\n\n    /**\n     * ...\n     * @param text to text ,eg: \"hello\"\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 120\n     * @param y to y ,eg: 120\n     * @param size to size ,eg: FontSize.Large\n     * @param color to color ,eg: 0xFF0000\n     */\n\n    //% block=\"display text %text number %num position x: %x y: %y size %size color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=120\n    //% y.min=0 y.max=240 y.defl=120\n    //% color.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=75\n    //% group=\"Basics\"\n    export function lcdDisplayText(text: string, num: number, x: number, y: number, size: FontSize, color: number) {\n        updateString(num, x, y, text, size, color);\n    }\n\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param time to time ,eg: \"12:40:30\"\n     * @param x to x ,eg: 120\n     * @param y to y ,eg: 120\n     * @param size to size ,eg: FontSize.Large\n     * @param color to color ,eg: 0xFF0000\n     */\n\n    //% block=\"display time number %num time %time position x: %x y: %y size %size color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=120\n    //% y.min=0 y.max=240 y.defl=120\n    //% color.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=70\n    //% group=\"Basics\"\n    //% deprecated=true\n    export function lcdDisplayTime(num: number, time: string, x: number, y: number, size: FontSize, color: number) {\n        updateString(num, x, y, time, size, color);\n    }\n\n    /**\n     * ...\n     * @param hour to hour ,eg: 12\n     * @param min to min ,eg: 40\n     * @param sec to sec ,eg: 30\n     */\n\n    //% block=\"hour %hour minutes %min second %sec \"\n    //% hour.min=0 hour.max=23 hour.defl=12\n    //% min.min=0 min.max=59 min.defl=40\n    //% sec.min=0 sec.max=59 sec.defl=30\n    //% inlineInputMode=inline\n    //% weight=68\n    //% group=\"Basics\"\n    export function lcdGetTime(hour: number, min: number, sec: number): string {\n        return `${hour < 10 ? \"0\" + hour : \"\" + hour}:${min < 10 ? \"0\" + min : \"\" + min}:${sec < 10 ? \"0\" + sec : \"\" + sec}`\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param name to name ,eg: \"/expression icon/happy.png\"\n     * @param x to x ,eg: 120\n     * @param y to y ,eg: 120\n     * @param size to size ,eg: FontSize.Large\n     */\n\n    //% block=\"display image number %num name %name position x: %x y: %y size %size\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=120\n    //% y.min=0 y.max=240 y.defl=120\n    //% size.min=0 size.max=512 size.defl=256\n    //% inlineInputMode=inline\n    //% weight=65\n    //% group=\"Basics\"\n    export function lcdDisplayIamge(num: number, name: string, x: number, y: number, size: number) {\n        updateIcon(num, x, y, name, size);\n    }\n\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param angle to angle ,eg: 180\n     */\n\n    //% block=\"rotate image number %num angle %angle\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% angle.min=0 angle.max=360 size.defl=180\n    //% weight=60\n    //% group=\"Basics\"\n    export function lcdRotateIamge(num: number, angle: number) {\n        setAngleIcon(num, angle * 10);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param name to name ,eg: \"Snowy.gif\"\n     * @param x to x ,eg: 120\n     * @param y to y ,eg: 120\n     * @param size to size ,eg: FontSize.Large\n     */\n\n    //% block=\"display gif number %num name %name position x: %x y: %y size %size\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=120\n    //% y.min=0 y.max=240 y.defl=120\n    //% size.min=0 size.max=512 size.defl=256\n    //% inlineInputMode=inline\n    //% weight=58\n    //% group=\"Basics\"\n    export function lcdDisplayGif(num: number, name: string, x: number, y: number, size: number) {\n        updateGif(num, x, y, name, size);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x1 to x1 ,eg: 40\n     * @param y1 to y1 ,eg: 120\n     * @param x2 to x2 ,eg: 300\n     * @param y2 to y2 ,eg: 120\n     * @param width to width ,eg: 20\n     * @param color to color ,eg: 0x007FFF\n     */\n\n    //% block=\"draw line number %num start x1: %x1 y1: %y1 end x2: %x2 y2: %y2 width %width color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x1.min=0 x1.max=320 x1.defl=40\n    //% y1.min=0 y1.max=240 y1.defl=120\n    //% x2.min=0 x2.max=320 x2.defl=300\n    //% y2.min=0 y2.max=240 y2.defl=120\n    //% color.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=55\n    //% group=\"Graph\"\n    //% advanced=true\n    export function lcdDrawLine(num: number, x1: number, y1: number, x2: number, y2: number, width: number, color: number) {\n        updateLine(num, x1, y1, x2, y2, width, color);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 0\n     * @param y to y ,eg: 0\n     * @param w to w ,eg: 300\n     * @param h to h ,eg: 200\n     * @param width to width ,eg: 5\n     * @param bocolor to bocolor ,eg: 0xFF0000\n     * @param fill to fill ,eg: DrawType.Fill\n     * @param fcolor to fcolor ,eg: 0xFFFFFF\n     * @param round to round ,eg: lcdDisplay.RectangleRound.NoneRound\n     */\n\n    //% block=\"draw rectangle number %num start x: %x y: %y width %w height %h line width %width Border color %bocolor %fill color %fcolor %round\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=0\n    //% y.min=0 y.max=240 y.defl=0\n    //% w.min=0 w.max=320 w.defl=300\n    //% h.min=0 h.max=240 h.defl=200\n    //% bocolor.shadow=\"colorNumberPicker\"\n    //% fcolor.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=50\n    //% group=\"Graph\"\n    //% advanced=true\n    export function lcdDrawRectangle(num: number, x: number, y: number, w: number, h: number, width: number, bocolor: number, fill: DrawType, fcolor: number, round: RectangleRound) {\n        updateRect(num, x, y, w, h, width, bocolor, fill === DrawType.Fill ? 1 : 0, fcolor, round === RectangleRound.IsRound ? 1 : 0);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 160\n     * @param y to y ,eg: 120\n     * @param r to r ,eg: 120\n     * @param width to width ,eg: 5\n     * @param bocolor to bocolor ,eg: 0xFF0000\n     * @param fill to fill ,eg: DrawType.Fill\n     * @param fcolor to fcolor ,eg: 0xFFFFFF\n     */\n\n    //% block=\"draw circle number %num center x: %x y: %y radius %r line width %width Border color %bocolor %fill color %fcolor\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=160\n    //% y.min=0 y.max=240 y.defl=120\n    //% r.min=0 r.max=120 r.defl=120\n    //% bocolor.shadow=\"colorNumberPicker\"\n    //% fcolor.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=45\n    //% group=\"Graph\"\n    //% advanced=true\n    export function lcdDrawCircle(num: number, x: number, y: number, r: number, width: number, bocolor: number, fill: DrawType, fcolor: number) {\n        updateCircle(num, x, y, r, width, bocolor, fill === DrawType.Fill ? 1 : 0, fcolor);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x1 to x1 ,eg: 160\n     * @param y1 to y1 ,eg: 0\n     * @param x2 to x2 ,eg: 0\n     * @param y2 to y2 ,eg: 240\n     * @param x3 to x3 ,eg: 320\n     * @param y3 to y3 ,eg: 240\n     * @param width to width ,eg: 5\n     * @param bocolor to bocolor ,eg: 0xFF0000\n     * @param fill to fill ,eg: DrawType.Fill\n     * @param fcolor to fcolor ,eg: 0xFFFFFF\n     */\n\n    //% block=\"draw triangle number %num x1: %x1 y1: %y1 x2: %x2 y2: %y2 x3: %x3 y3: %y3 line width %width Border color %bocolor %fill color %fcolor\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x1.min=0 x1.max=320 x1.defl=160\n    //% y1.min=0 y1.max=240 y1.defl=0\n    //% x2.min=0 x2.max=320 x2.defl=0\n    //% y2.min=0 y2.max=240 y2.defl=240\n    //% x3.min=0 x3.max=320 x3.defl=320\n    //% y3.min=0 y3.max=240 y3.defl=240\n    //% bocolor.shadow=\"colorNumberPicker\"\n    //% fcolor.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=40\n    //% group=\"Graph\"\n    //% advanced=true\n    export function lcdDrawTriangle(num: number, x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, width: number, bocolor: number, fill: DrawType, fcolor: number) {\n        updateTriangle(num, x1, y1, x2, y2, x3, y3, width, bocolor, fill === DrawType.Fill ? 1 : 0, fcolor);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 80\n     * @param y to y ,eg: 120\n     * @param w to w ,eg: 200\n     * @param h to h ,eg: 20\n     * @param color to color ,eg: 0x007FFF\n     */\n\n    //% block=\"draw slider number %num position x: %x y: %y width %w height %h color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=80\n    //% y.min=0 y.max=240 y.defl=120\n    //% w.min=0 w.max=320 w.defl=200\n    //% h.min=0 h.max=240 h.defl=20\n    //% color.shadow=\"colorNumberPicker\"\n    //% expandableArgumentMode=\"toggle\"\n    //% inlineInputMode=inline\n    //% weight=35\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawSlider(num: number, x: number, y: number, w: number, h: number, color: number) {\n        updateSlider(num, x, y, w, h, color);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 80\n     * @param y to y ,eg: 120\n     * @param w to w ,eg: 200\n     * @param h to h ,eg: 20\n     * @param color to color ,eg: 0x007FFF\n     */\n\n    //% block=\"draw bar number %num position x: %x y: %y width %w height %h color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=80\n    //% y.min=0 y.max=240 y.defl=120\n    //% w.min=0 w.max=320 w.defl=200\n    //% h.min=0 h.max=240 h.defl=20\n    //% color.shadow=\"colorNumberPicker\"\n    //% expandableArgumentMode=\"toggle\"\n    //% inlineInputMode=inline\n    //% weight=30\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawBar(num: number, x: number, y: number, w: number, h: number, color: number) {\n        updateBar(num, x, y, w, h, color);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 50\n     * @param y to y ,eg: 0\n     * @param r to r ,eg: 240\n     */\n\n    //% block=\"draw compass number %num position x: %x y: %y radius %r\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=50\n    //% y.min=0 y.max=240 y.defl=0\n    //% r.min=0 r.max=320 r.defl=240\n    //% inlineInputMode=inline\n    //% weight=25\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawCompass(num: number, x: number, y: number, r: number) {\n        updateCompass(num, x, y, r);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 50\n     * @param y to y ,eg: 0\n     * @param r to r ,eg: 240\n     * @param start to start ,eg: 0\n     * @param end to end ,eg: 360\n     * @param color to color ,eg: 0x000000\n     * @param dcolor to dcolor ,eg: 0xFFFFFF\n     */\n\n    //% block=\"draw gauge number %num position x: %x y: %y radius %r start of scale %start End of scale %end Pointer color %color Dial color %dcolor\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=50\n    //% y.min=0 y.max=240 y.defl=0\n    //% r.min=0 r.max=320 r.defl=240\n    //% start.min=0 start.max=360 start.defl=0\n    //% end.min=0 end.max=360 end.defl=360\n    //% color.shadow=\"colorNumberPicker\"\n    //% dcolor.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=20\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawGauge(num: number, x: number, y: number, r: number, start: number, end: number, color: number, dcolor: number) {\n        updateGauge(num, x, y, r, start, end, color, dcolor);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param x to x ,eg: 0\n     * @param y to y ,eg: 0\n     * @param r to r ,eg: 240\n     * @param start to start ,eg: 0\n     * @param end to end ,eg: 100\n     * @param color to color ,eg: 0x000000\n     * @param dcolor to dcolor ,eg: 0xFFFFFF\n     */\n\n    //% block=\"draw lineMeter number %num position x: %x y: %y radius %r start of scale %start End of scale %end Data color %color Dial color %dcolor\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% x.min=0 x.max=320 x.defl=0\n    //% y.min=0 y.max=240 y.defl=0\n    //% r.min=0 r.max=320 r.defl=240\n    //% start.min=0 start.max=360 start.defl=0\n    //% end.min=0 end.max=360 end.defl=100\n    //% color.shadow=\"colorNumberPicker\"\n    //% dcolor.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=18\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawLineMeter(num: number, x: number, y: number, r: number, start: number, end: number, color: number, dcolor: number) {\n        updateLineMeter(num, x, y, r, start, end, color, dcolor);\n    }\n\n    /**\n     * ...\n     * @param type to type ,eg: LCDWidgetCategoryOne.Slider\n     * @param num to num ,eg: 1\n     * @param data to data ,eg: 80\n     */\n\n    //% block=\"set %type=LCDWidgetCategoryOne_conv widget number %num data %data\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% weight=17\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdSetWidgetData(type: number, num: number, data: number) {\n        switch (type) {\n            case LCDWidgetCategoryOne.Slider:\n                setSliderValue(num, data);\n                break;\n            case LCDWidgetCategoryOne.Bar:\n                setBarValue(num, data);\n                break;\n            case LCDWidgetCategoryOne.Compass:\n                setCompassScale(num, (data / 360) * 3600);\n                break;\n            case LCDWidgetCategoryOne.Gauge:\n                setGaugeValue(num, data);\n                break;\n            case LCDWidgetCategoryOne.LineMeter:\n                setMeterValue(num, data);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param xaxis to xaxis ,eg: \"Jan Feb Mar Apr May Jun\"\n     * @param yaxis to yaxis ,eg: \"100 80 60 40 20 0\"\n     * @param color to color ,eg: 0xFFFFFF\n     * @param styles to styles ,eg: ChartStyles.LineChart\n     */\n\n    //% block=\"draw chart number %num X-axis %xaxis Y-axis %yaxis background color %color styles %styles\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% color.shadow=\"colorNumberPicker\"\n    //% inlineInputMode=inline\n    //% weight=16\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdDrawChart(num: number, xaxis: string, yaxis: string, color: number, styles: ChartStyles) {\n        chartID = num;\n        axisListX = xaxis.split(\" \");\n        axisListY = yaxis.split(\" \");\n        axisListX.forEach((value, index) => { axisYData.push(0) });\n        dataFactor = Math.abs((parseInt(axisListY[0]) - parseInt(axisListY[axisListY.length-1])) / 100);\n        updateChart(chartID, color, styles);\n        basic.pause(100);\n        setChartAxisTexts(chartID, 0, axisListX);\n        basic.pause(100);\n        setChartAxisTexts(chartID, 1, axisListY);\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param color to color ,eg: 0xFF0000\n     */\n\n    //% block=\"Set chart data number %num color %color\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% color.shadow=\"colorNumberPicker\"\n    //% weight=14\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdAddChartData(num: number, color: number) {\n        seriesData[num] = axisYData;\n        updateChartSeries(chartID, num, color);\n        addChartSeriesData(chartID, num, seriesData[num], axisListY.length)\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param xaxis to xaxis ,eg: \"Jan\"\n     * @param data to data ,eg: 80\n     */\n\n    //% block=\"set chart data number %num X-axis %xaxis data %data\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% weight=12\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdSetChartData(num: number, xaxis: string, data: number) {\n        let index = axisListX.indexOf(xaxis);\n        if (index !== -1) {\n            updateChartPoint(chartID, num, index, Math.round(data / dataFactor));\n            // seriesData[num][index] = Math.round(data / 10);\n        }\n    }\n\n    /**\n     * ...\n     * @param num to num ,eg: 1\n     * @param color to color ,eg: 0x007FFF\n     * @param styles to styles ,eg: lcdDisplay.ChartStyles.BarChart\n     */\n\n    //% block=\"update chart number %num background color %color styles %styles\"\n    //% color.shadow=\"colorNumberPicker\"\n    //% weight=11\n    //% group=\"Widget\"\n    //% advanced=true\n    export function lcdUpdateChart(num: number, color: number, styles: ChartStyles) {\n        updateChart(num, color, styles);\n    }\n\n    /**\n     * ...\n     * @param type to type ,eg: LCDWidgetCategoryTwo.Text\n     * @param num to num ,eg: 1\n     */\n\n    //% block=\"delete %type=LCDWidgetCategoryTwo_conv number %num\"\n    //% num.min=1 num.max=255 num.defl=1\n    //% weight=8\n    //% group=\"Basics\"\n    export function lcdDeleteWidget(type: number, num: number) {\n        switch (type) {\n            case LCDWidgetCategoryTwo.Slider:\n                deleteSlider(num);\n                break;\n            case LCDWidgetCategoryTwo.Bar:\n                deleteBar(num);\n                break;\n            case LCDWidgetCategoryTwo.Compass:\n                deleteCompass(num);\n                break;\n            case LCDWidgetCategoryTwo.Gauge:\n                deleteGauge(num);\n                break;\n            case LCDWidgetCategoryTwo.LineMeter:\n                deleteLineMeter(num);\n                break;\n            case LCDWidgetCategoryTwo.Chart:\n                deleteChart(num);\n                break;\n            case LCDWidgetCategoryTwo.Text:\n                deleteString(num);\n                break;\n            case LCDWidgetCategoryTwo.Line:\n                deleteLine(num);\n                break;\n            case LCDWidgetCategoryTwo.Rectangle:\n                deleteRect(num);\n                break;\n            case LCDWidgetCategoryTwo.Circle:\n                deleteCircle(num);\n                break;\n            case LCDWidgetCategoryTwo.Triangle:\n                deleteTriangle(num);\n                break;\n            case LCDWidgetCategoryTwo.Icon:\n                deleteIcon(num);\n                break;\n            case LCDWidgetCategoryTwo.Gif:\n                deleteGif(num);\n            default:\n                break;\n        }\n    }\n\n    /**\n     * return the corresponding LCDWidgetCategoryOne number\n     */\n    //% blockId=\"LCDWidgetCategoryOne_conv\" block=\"%item\"\n    //% weight=2 blockHidden=true\n    export function getWidgetCategoryOne(item: LCDWidgetCategoryOne): number {\n        return item as number;\n    }\n\n    /**\n     * return the corresponding LCDWidgetCategoryTwo number\n     */\n    //% blockId=\"LCDWidgetCategoryTwo_conv\" block=\"%item\"\n    //% weight=1 blockHidden=true\n    export function getLCDWidgetCategoryTwo(item: LCDWidgetCategoryTwo): number {\n        return item as number;\n    }\n\n    function cleanScreen() {\n        let cmd = creatCommand(0x1D, 0x04);\n        writeCommand(cmd, 4);\n        basic.pause(1500);\n    }\n\n    function setBackgroundColor(color: number) {\n        let cmd = creatCommand(CMD_SET_BACKGROUND_COLOR, CMD_SET_LEN);\n        cmd = cmd.concat(data24Tobyte(color));\n        writeCommand(cmd, CMD_SET_LEN);\n        basic.pause(300);\n    }\n\n    function setBackgroundImg(location: number, str: string) {\n        let len = str.length;\n        let cmd = creatCommand(CMD_SET_BACKGROUND_IMG, len + 5);\n        cmd = cmd.concat([location]);\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 5);\n    }\n\n    function drawString(x: number, y: number, str: string, fontSize: number, color: number) {\n        let len = str.length > 242 ? 242 : str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_TEXT, len + 13);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_TEXT), fontSize]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 13);\n    }\n\n    function updateString(id: number, x: number, y: number, str: string, fontSize: number, color: number) {\n        let len = str.length > 242 ? 242 : str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_TEXT, len + 13);\n        cmd = cmd.concat([id, fontSize]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 13);\n    }\n\n    function deleteString(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_TEXT, id])\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.textHead, id);\n    }\n\n    function drawLcdTime(x: number, y: number, hour: number, min: number, sec: number, fontSize: number, color: number) {\n        drawString(x, y, `${hour < 10 ? \"0\" + hour : \"\" + hour}:${min < 10 ? \"0\" + min : \"\" + min}:${sec < 10 ? \"0\" + sec : \"\" + sec}`, fontSize, color);\n    }\n\n    function updateLcdTime(id: number, x: number, y: number, hour: number, min: number, sec: number, fontSize: number, color: number) {\n        updateString(id, x, y, `${hour < 10 ? \"0\" + hour : \"\" + hour}:${min < 10 ? \"0\" + min : \"\" + min}:${sec < 10 ? \"0\" + sec : \"\" + sec}`, fontSize, color);\n    }\n\n    function drawIcon(x: number, y: number, str: string, zoom: number) {\n        let len = str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_ICON_EXTERNAL, len + 11);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_ICON_INTERNAL)]).concat(data16Tobyte(zoom)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 11);\n    }\n\n    function setAngleIcon(id: number, angle: number) {\n        let cmd = creatCommand(CMD_SET_ANGLE_OBJ, CMD_SET_ANGLE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_ICON_INTERNAL, id]).concat(data16Tobyte(angle));\n        writeCommand(cmd, CMD_SET_ANGLE_OBJ_LEN);\n    }\n\n    function updateIcon(id: number, x: number, y: number, str: string, zoom: number) {\n        let len = str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_ICON_EXTERNAL, len + 11);\n        cmd = cmd.concat([id]).concat(data16Tobyte(zoom)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 11);\n    }\n\n    function deleteIcon(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_ICON_INTERNAL, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.iconHead, id);\n    }\n\n    function drawGif(x: number, y: number, str: string, zoom: number): number {\n        let len = str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_GIF_EXTERNAL, len + 11);\n        let id = getID(CMD_OF_DRAW_GIF_EXTERNAL);\n        cmd = cmd.concat([id]).concat(data16Tobyte(zoom)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 11);\n        return id;\n    }\n\n    function updateGif(id: number, x: number, y: number, str: string, zoom: number) {\n        let len = str.length;\n        let cmd = creatCommand(CMD_OF_DRAW_GIF_EXTERNAL, len + 11);\n        cmd = cmd.concat([id]).concat(data16Tobyte(zoom)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        str.split(\"\").forEach((value, index) => { cmd.push(value.charCodeAt(0)) });\n        writeCommand(cmd, len + 11);\n    }\n\n    function deleteGif(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_GIF_INTERNAL, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.gifHead, id);\n    }\n\n    function drawLine(x0: number, y0: number, x1: number, y1: number, width: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE, CMD_DRAW_LINE_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_LINE), width]).concat(data24Tobyte(color)).concat(data16Tobyte(x0)).concat(data16Tobyte(y0)).concat(data16Tobyte(x1)).concat(data16Tobyte(y1));\n        writeCommand(cmd, CMD_DRAW_LINE_LEN);\n    }\n\n    function updateLine(id: number, x0: number, y0: number, x1: number, y1: number, width: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE, CMD_DRAW_LINE_LEN);\n        cmd = cmd.concat([id, width]).concat(data24Tobyte(color)).concat(data16Tobyte(x0)).concat(data16Tobyte(y0)).concat(data16Tobyte(x1)).concat(data16Tobyte(y1));\n        writeCommand(cmd, CMD_DRAW_LINE_LEN);\n        basic.pause(10);\n    }\n\n    function deleteLine(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_LINE, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.lineHead, id);\n    }\n\n    function drawRect(x: number, y: number, w: number, h: number, bw: number, boColor: number, fill: number, fillColor: number, rounded: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_RECT, CMD_OF_DRAW_RECT_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_RECT), bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat([rounded]).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_RECT_LEN);\n    }\n\n    function updateRect(id: number, x: number, y: number, w: number, h: number, bw: number, boColor: number, fill: number, fillColor: number, rounded: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_RECT, CMD_OF_DRAW_RECT_LEN);\n        cmd = cmd.concat([id, bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat([rounded]).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_RECT_LEN);\n    }\n\n    function deleteRect(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_RECT, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.rectHead, id);\n    }\n\n    function drawCircle(x: number, y: number, r: number, bw: number, boColor: number, fill: number, fillColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_CIRCLE, CMD_OF_DRAW_CIRCLE_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_CIRCLE), bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat(data16Tobyte(r)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_CIRCLE_LEN);\n    }\n\n    function updateCircle(id: number, x: number, y: number, r: number, bw: number, boColor: number, fill: number, fillColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_CIRCLE, CMD_OF_DRAW_CIRCLE_LEN);\n        cmd = cmd.concat([id, bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat(data16Tobyte(r)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_CIRCLE_LEN);\n    }\n\n    function deleteCircle(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_CIRCLE, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.circleHead, id);\n    }\n\n    function drawTriangle(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, bw: number, boColor: number, fill: number, fillColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_TRIANGLE, CMD_OF_DRAW_TRIANGLE_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_TRIANGLE), bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat(data16Tobyte(x0)).concat(data16Tobyte(y0)).concat(data16Tobyte(x1)).concat(data16Tobyte(y1)).concat(data16Tobyte(x2)).concat(data16Tobyte(y2));\n        writeCommand(cmd, CMD_OF_DRAW_TRIANGLE_LEN);\n    }\n\n    function updateTriangle(id: number, x0: number, y0: number, x1: number, y1: number, x2: number, y2: number, bw: number, boColor: number, fill: number, fillColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_TRIANGLE, CMD_OF_DRAW_TRIANGLE_LEN);\n        cmd = cmd.concat([id, bw]).concat(data24Tobyte(boColor)).concat([fill]).concat(data24Tobyte(fillColor)).concat(data16Tobyte(x0)).concat(data16Tobyte(y0)).concat(data16Tobyte(x1)).concat(data16Tobyte(y1)).concat(data16Tobyte(x2)).concat(data16Tobyte(y2));\n        writeCommand(cmd, CMD_OF_DRAW_TRIANGLE_LEN);\n    }\n\n    function deleteTriangle(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_TRIANGLE, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.triangleHead, id);\n    }\n\n    function creatSlider(x: number, y: number, w: number, h: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_SLIDER, CMD_OF_DRAW_SLIDER_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_SLIDER)]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_SLIDER_LEN);\n    }\n\n    function updateSlider(id: number, x: number, y: number, w: number, h: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_SLIDER, CMD_OF_DRAW_SLIDER_LEN);\n        cmd = cmd.concat([id]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_SLIDER_LEN);\n    }\n\n    function setSliderValue(id: number, value: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_SLIDER_VALUE, CMD_SET_SLIDER_VALUE_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(value));\n        writeCommand(cmd, CMD_SET_SLIDER_VALUE_LEN);\n    }\n\n    function deleteSlider(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_SLIDER, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.sliderHead, id);\n    }\n\n    function creatBar(x: number, y: number, w: number, h: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_BAR, CMD_OF_DRAW_BAR_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_BAR)]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_BAR_LEN);\n    }\n\n    function updateBar(id: number, x: number, y: number, w: number, h: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_BAR, CMD_OF_DRAW_BAR_LEN);\n        cmd = cmd.concat([id]).concat(data24Tobyte(color)).concat(data16Tobyte(x)).concat(data16Tobyte(y)).concat(data16Tobyte(w)).concat(data16Tobyte(h));\n        writeCommand(cmd, CMD_OF_DRAW_BAR_LEN);\n    }\n\n    function setBarValue(id: number, value: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_BAR_VALUE, CMD_SET_BAR_VALUE_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(value));\n        writeCommand(cmd, CMD_SET_BAR_VALUE_LEN);\n    }\n\n    function deleteBar(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_BAR, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.barHead, id);\n    }\n\n    function creatCompass(x: number, y: number, diameter: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_COMPASS, CMD_DRAW_COMPASS_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_COMPASS)]).concat(data16Tobyte(diameter)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_DRAW_COMPASS_LEN);\n    }\n\n    function updateCompass(id: number, x: number, y: number, diameter: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_COMPASS, CMD_DRAW_COMPASS_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(diameter)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_DRAW_COMPASS_LEN);\n    }\n\n    function setCompassScale(id: number, scale: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_COMPASS_VALUE, CMD_SET_COMPASS_VALUE_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(scale));\n        writeCommand(cmd, CMD_SET_COMPASS_VALUE_LEN);\n    }\n\n    function deleteCompass(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_COMPASS, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.compassHead, id);\n    }\n\n    function creatGauge(x: number, y: number, diameter: number, start: number, end: number, pointerColor: number, bgColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_GAUGE, CMD_OF_DRAW_GAUGE_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_GAUGE)]).concat(data16Tobyte(diameter)).concat(data16Tobyte(start)).concat(data16Tobyte(end)).concat(data24Tobyte(pointerColor)).concat(data24Tobyte(bgColor)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_GAUGE_LEN);\n    }\n\n    function updateGauge(id: number, x: number, y: number, diameter: number, start: number, end: number, pointerColor: number, bgColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_GAUGE, CMD_OF_DRAW_GAUGE_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(diameter)).concat(data16Tobyte(start)).concat(data16Tobyte(end)).concat(data24Tobyte(pointerColor)).concat(data24Tobyte(bgColor)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_GAUGE_LEN);\n    }\n\n    function setGaugeValue(id: number, value: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_GAUGE_VALUE, CMD_SET_GAUGE_VALUE_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(value));\n        writeCommand(cmd, CMD_SET_GAUGE_VALUE_LEN);\n    }\n\n    function deleteGauge(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_GAUGE, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.gaugeHead, id);\n    }\n\n    function creatLineMeter(x: number, y: number, size: number, start: number, end: number, pointerColor: number, bgColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_METER, CMD_OF_DRAW_LINE_METER_LEN);\n        cmd = cmd.concat([getID(CMD_OF_DRAW_LINE_METER)]).concat(data16Tobyte(size)).concat(data16Tobyte(start)).concat(data16Tobyte(end)).concat(data24Tobyte(pointerColor)).concat(data24Tobyte(bgColor)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_LINE_METER_LEN);\n    }\n\n    function updateLineMeter(id: number, x: number, y: number, size: number, start: number, end: number, pointerColor: number, bgColor: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_METER, CMD_OF_DRAW_LINE_METER_LEN);\n        cmd = cmd.concat([id]).concat(data16Tobyte(size)).concat(data16Tobyte(start)).concat(data16Tobyte(end)).concat(data24Tobyte(pointerColor)).concat(data24Tobyte(bgColor)).concat(data16Tobyte(x)).concat(data16Tobyte(y));\n        writeCommand(cmd, CMD_OF_DRAW_LINE_METER_LEN);\n    }\n\n    function setTopLineMeter(id: number) {\n        let cmd = creatCommand(CMD_SET_TOP_OBJ, CMD_SET_TOP_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_LINE_METER, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n    }\n\n    function deleteLineMeter(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_LINE_METER, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.lineMeterHead, id);\n    }\n\n    function creatChart(strX: string[], strY: string[], bgColor: number, type: number): number {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_CHART, CMD_DRAW_CHART_LEN);\n        let id = getID(CMD_OF_DRAW_LINE_CHART);\n        cmd = cmd.concat([id, type]).concat(data24Tobyte(bgColor));\n        writeCommand(cmd, CMD_DRAW_CHART_LEN);\n        basic.pause(100);\n        setChartAxisTexts(id, 0, strX);\n        basic.pause(100);\n        setChartAxisTexts(id, 1, strY);\n        return id;\n    }\n\n    function updateChart(id: number, bgColor: number, type: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_CHART, CMD_DRAW_CHART_LEN);\n        cmd = cmd.concat([id, type]).concat(data24Tobyte(bgColor));\n        writeCommand(cmd, CMD_DRAW_CHART_LEN);\n    }\n\n    function creatChartSeries(chartId: number, color: number): number {\n        let cmd = creatCommand(CMD_OF_DRAW_SERIE, CMD_DRAW_SERIE_LEN);\n        let serieId = getID(CMD_OF_DRAW_SERIE);\n        cmd = cmd.concat([serieId, chartId]).concat(data24Tobyte(color));\n        writeCommand(cmd, CMD_DRAW_SERIE_LEN);\n        return serieId;\n    }\n\n    function updateChartSeries(chartId: number, seriesId: number, color: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_SERIE, CMD_DRAW_SERIE_LEN);\n        cmd = cmd.concat([seriesId, chartId]).concat(data24Tobyte(color));\n        writeCommand(cmd, CMD_DRAW_SERIE_LEN);\n    }\n\n    function setChartAxisTexts(chartId: number, axis: number, text: string[]) {\n        let len = text.length - 1;\n        text.forEach((value, index) => { len = len + value.length });\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_CHART_TEXT, len + 6);\n        cmd = cmd.concat([chartId, axis]);\n        for (let i = 0; i < text.length; i++) {\n            text[i].split(\"\").forEach((value, index) => {\n                cmd.push(value.charCodeAt(0))\n            })\n            if (i != text.length - 1) {\n                cmd.push(0x0A); // \"\\n\"\n            }\n        }\n        writeCommand(cmd, len + 6);\n    }\n\n    function updateChartPoint(chartId: number, seriesId: number, pointNum: number, value: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_SERIE_DATA, 10);\n        cmd = cmd.concat([chartId, seriesId, 1, pointNum]).concat(data16Tobyte(value));\n        writeCommand(cmd, 10);\n    }\n\n    function addChartSeriesData(chartId: number, seriesId: number, point: number[], len: number): number {\n        let cmd = creatCommand(CMD_OF_DRAW_SERIE_DATA, len * 2 + 8);\n        cmd = cmd.concat([chartId, seriesId, 0, 0]);\n        point.forEach((value, index) => { cmd = cmd.concat(data16Tobyte(value)) });\n        writeCommand(cmd, len * 2 + 8);\n        return 1;\n    }\n\n    function setTopChart(id: number) {\n        let cmd = creatCommand(CMD_SET_TOP_OBJ, CMD_SET_TOP_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_LINE_CHART, id]);\n        writeCommand(cmd, CMD_SET_TOP_OBJ_LEN);\n    }\n\n    function deleteChart(id: number) {\n        let cmd = creatCommand(CMD_DELETE_OBJ, CMD_DELETE_OBJ_LEN);\n        cmd = cmd.concat([CMD_OF_DRAW_LINE_CHART, id]);\n        writeCommand(cmd, CMD_DELETE_OBJ_LEN);\n        deleteNodeByID(list.lineChartHead, id);\n    }\n\n    function setMeterValue(lineMeterId: number, value: number) {\n        let cmd = creatCommand(CMD_OF_DRAW_LINE_METER_VALUE, CMD_SET_LINE_METER_VALUE_LEN);\n        cmd = cmd.concat([lineMeterId]).concat(data16Tobyte(value));\n        writeCommand(cmd, CMD_SET_LINE_METER_VALUE_LEN);\n    }\n\n\n    /********************************************************************************************************************/\n    function creatList() {\n        list.lineChartHead = new LinkedList();\n        list.seriesHead = new LinkedList();\n        list.compassHead = new LinkedList();\n        list.textHead = new LinkedList();\n        list.gaugeHead = new LinkedList();\n        list.lineHead = new LinkedList();\n        list.rectHead = new LinkedList();\n        list.circleHead = new LinkedList();\n        list.triangleHead = new LinkedList();\n        list.lineMeterHead = new LinkedList();\n        list.barHead = new LinkedList();\n        list.sliderHead = new LinkedList();\n        list.iconHead = new LinkedList();\n        list.gifHead = new LinkedList();\n    }\n\n    function getID(type: number): number {\n        let id = 0;\n        switch (type) {\n            case CMD_OF_DRAW_LINE_CHART:\n                id = getNewID(list.lineChartHead);\n                break;\n            case CMD_OF_DRAW_SERIE:\n                id = getNewID(list.seriesHead);\n                break;\n            case CMD_OF_DRAW_COMPASS:\n                id = getNewID(list.compassHead);\n                break;\n            case CMD_OF_DRAW_TEXT:\n                id = getNewID(list.textHead);\n                break;\n            case CMD_OF_DRAW_GAUGE:\n                id = getNewID(list.gaugeHead);\n                break;\n            case CMD_OF_DRAW_LINE:\n                id = getNewID(list.lineHead);\n                break;\n            case CMD_OF_DRAW_RECT:\n                id = getNewID(list.rectHead);\n                break;\n            case CMD_OF_DRAW_TRIANGLE:\n                id = getNewID(list.triangleHead);\n                break;\n            case CMD_OF_DRAW_CIRCLE:\n                id = getNewID(list.circleHead);\n                break;\n            case CMD_OF_DRAW_LINE_METER:\n                id = getNewID(list.lineMeterHead);\n                break;\n            case CMD_OF_DRAW_BAR:\n                id = getNewID(list.barHead);\n                break;\n            case CMD_OF_DRAW_SLIDER:\n                id = getNewID(list.sliderHead);\n                break;\n            case CMD_OF_DRAW_ICON_INTERNAL:\n                id = getNewID(list.iconHead);\n                break;\n            case CMD_OF_DRAW_GIF_INTERNAL:\n                id = getNewID(list.gifHead);\n                break;\n            default:\n                break;\n        }\n        return id;\n    }\n\n    function getNewID(linkList: LinkedList): number {\n        linkList.append();\n        return linkList.head.id;\n    }\n\n    function deleteNodeByID(linkList: LinkedList, id: number) {\n        linkList.removeId(id);\n    }\n\n    function data16Tobyte(data: number): number[] {\n        return [(data >> 8) & 0xFF, data & 0xFF];\n    }\n\n    function data24Tobyte(data: number): number[] {\n        return [(data >> 16) & 0xFF, (data >> 8) & 0xFF, data & 0xFF];\n    }\n\n    function colorToCustom(color: number): number {\n        switch (color) {\n            case 0x999999:\n                return 0x696969;\n            case 0x7f00ff:\n                return 0x800080;\n            default:\n                return color;\n        }\n    }\n\n    function creatCommand(cmd: number, len: number): number[] {\n        return [CMD_HEADER_HIGH, CMD_HEADER_LOW, len - CMDLEN_OF_HEAD_LEN, cmd];\n    }\n\n    function writeCommand(data: number[], len: number) {\n        // serial.writeNumbers(data);\n        if (protocol == Protocol.IIC) {\n            let remain = len;\n            let i = 0;\n            while (remain > 0) {\n                let currentTransferSize = (remain > IIC_MAX_TRANSFER_SIZE) ? 32 : remain;\n                if (remain > IIC_MAX_TRANSFER_SIZE) {\n                    pins.i2cWriteBuffer(address, pins.createBufferFromArray(data.slice(i * IIC_MAX_TRANSFER_SIZE, i * IIC_MAX_TRANSFER_SIZE + currentTransferSize)), true);\n                } else {\n                    pins.i2cWriteBuffer(address, pins.createBufferFromArray(data.slice(i * IIC_MAX_TRANSFER_SIZE, i * IIC_MAX_TRANSFER_SIZE + currentTransferSize)), false);\n                }\n                remain = remain - currentTransferSize;\n                i = i + 1;\n            }\n        } else {\n\n        }\n    }\n\n    function readACK(length: number): Buffer {\n        if (protocol == Protocol.IIC) {\n            let remain = length;\n            let buf: Buffer = pins.createBuffer(0);\n            while (remain) {\n                let currentTransferSize = (remain > IIC_MAX_TRANSFER_SIZE) ? IIC_MAX_TRANSFER_SIZE : remain;\n                buf = buf.concat(pins.i2cReadBuffer(address, currentTransferSize));\n                remain = remain - currentTransferSize;\n            }\n            return buf;\n        } else {\n            let buf: Buffer = pins.createBuffer(0);\n            return buf;\n        }\n    }\n}","README.md":"","pxt.json":"{\n    \"name\": \"lcdDisplay\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1739961988454}